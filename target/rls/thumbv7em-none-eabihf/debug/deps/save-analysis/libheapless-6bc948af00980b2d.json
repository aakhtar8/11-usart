{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7","program":"/home/ahmed/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","heapless","/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-Cembed-bitcode=no","-C","debuginfo=2","-C","metadata=6bc948af00980b2d","-C","extra-filename=-6bc948af00980b2d","--out-dir","/home/ahmed/Desktop/11-usart/target/rls/thumbv7em-none-eabihf/debug/deps","--target","thumbv7em-none-eabihf","-L","dependency=/home/ahmed/Desktop/11-usart/target/rls/thumbv7em-none-eabihf/debug/deps","-L","dependency=/home/ahmed/Desktop/11-usart/target/rls/debug/deps","--extern","generic_array=/home/ahmed/Desktop/11-usart/target/rls/thumbv7em-none-eabihf/debug/deps/libgeneric_array-61ca3cd1fe696d76.rmeta","--extern","hash32=/home/ahmed/Desktop/11-usart/target/rls/thumbv7em-none-eabihf/debug/deps/libhash32-eda213134467e0bb.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/ahmed/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/ahmed/Desktop/11-usart/target/rls/thumbv7em-none-eabihf/debug/deps/libheapless-6bc948af00980b2d.rmeta"},"prelude":{"crate_id":{"name":"heapless","disambiguator":[11962229246907335833,4348984586774380104]},"crate_root":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src","external_crates":[{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[11055210636768043508,18347481556332092962]}},{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[11438832063202011998,2578949194091112984]}},{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[16901179735376980002,15162046457271970232]}},{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","num":4,"id":{"name":"generic_array","disambiguator":[13324401890926367092,12916855294584881162]}},{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","num":5,"id":{"name":"typenum","disambiguator":[15876957592069402905,18313140007321998368]}},{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","num":6,"id":{"name":"hash32","disambiguator":[14186761678995125290,331454082451347954]}},{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","num":7,"id":{"name":"byteorder","disambiguator":[4543534721155483117,1878534139899208406]}}],"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":0,"byte_end":4297,"line_start":1,"line_end":119,"column_start":1,"column_end":12}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":695},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":3885,"byte_end":3895,"line_start":99,"line_end":99,"column_start":22,"column_end":32},"alias_span":null,"name":"BinaryHeap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":5,"index":2247},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":3929,"byte_end":3935,"line_start":100,"line_end":100,"column_start":33,"column_end":39},"alias_span":null,"name":"consts","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":4,"index":327},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":3960,"byte_end":3971,"line_start":101,"line_end":101,"column_start":24,"column_end":35},"alias_span":null,"name":"ArrayLength","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":42},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":3992,"byte_end":4003,"line_start":102,"line_end":102,"column_start":20,"column_end":31},"alias_span":null,"name":"FnvIndexMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":88},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":4005,"byte_end":4013,"line_start":102,"line_end":102,"column_start":33,"column_end":41},"alias_span":null,"name":"IndexMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":252},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":4035,"byte_end":4046,"line_start":103,"line_end":103,"column_start":20,"column_end":31},"alias_span":null,"name":"FnvIndexSet","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":255},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":4048,"byte_end":4056,"line_start":103,"line_end":103,"column_start":33,"column_end":41},"alias_span":null,"name":"IndexSet","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":401},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":4079,"byte_end":4088,"line_start":104,"line_end":104,"column_start":21,"column_end":30},"alias_span":null,"name":"LinearMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":829},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":4111,"byte_end":4121,"line_start":105,"line_end":105,"column_start":22,"column_end":32},"alias_span":null,"name":"RingBuffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":496},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":4139,"byte_end":4145,"line_start":106,"line_end":106,"column_start":17,"column_end":23},"alias_span":null,"name":"String","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":562},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":4160,"byte_end":4163,"line_start":107,"line_end":107,"column_start":14,"column_end":17},"alias_span":null,"name":"Vec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":782},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":110892,"byte_end":110900,"line_start":14,"line_end":14,"column_start":22,"column_end":30},"alias_span":null,"name":"Consumer","value":"","parent":{"krate":0,"index":744}},{"kind":"Use","ref_id":{"krate":0,"index":794},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":110902,"byte_end":110910,"line_start":14,"line_end":14,"column_start":32,"column_end":40},"alias_span":null,"name":"Producer","value":"","parent":{"krate":0,"index":744}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":0,"byte_end":4297,"line_start":1,"line_end":119,"column_start":1,"column_end":12},"name":"","qualname":"::","value":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":235},{"krate":0,"index":393},{"krate":0,"index":488},{"krate":0,"index":551},{"krate":0,"index":677},{"krate":0,"index":744},{"krate":0,"index":889}],"decl_id":null,"docs":" `static` friendly data structures that don't require dynamic memory allocation","sig":null,"attributes":[{"value":"! `static` friendly data structures that don't require dynamic memory allocation","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":0,"byte_end":82,"line_start":1,"line_end":1,"column_start":1,"column_end":83}},{"value":"!","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":83,"byte_end":86,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! The core principle behind `heapless` is that its data structures are backed by a *static* memory","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":87,"byte_end":187,"line_start":3,"line_end":3,"column_start":1,"column_end":101}},{"value":"! allocation. For example, you can think of `heapless::Vec` as an alternative version of","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":188,"byte_end":278,"line_start":4,"line_end":4,"column_start":1,"column_end":91}},{"value":"! `std::Vec` with fixed capacity and that can't be re-allocated on the fly (e.g. via `push`).","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":279,"byte_end":374,"line_start":5,"line_end":5,"column_start":1,"column_end":96}},{"value":"!","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":375,"byte_end":378,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"! All `heapless` data structures store their memory allocation *inline* and specify their capacity","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":379,"byte_end":479,"line_start":7,"line_end":7,"column_start":1,"column_end":101}},{"value":"! via their type parameter `N`. This means that you can instantiate a `heapless` data structure on","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":480,"byte_end":580,"line_start":8,"line_end":8,"column_start":1,"column_end":101}},{"value":"! the stack, in a `static` variable, or even in the heap.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":581,"byte_end":640,"line_start":9,"line_end":9,"column_start":1,"column_end":60}},{"value":"!","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":641,"byte_end":644,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":645,"byte_end":652,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"! use heapless::Vec; // fixed capacity `std::Vec`","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":653,"byte_end":704,"line_start":12,"line_end":12,"column_start":1,"column_end":52}},{"value":"! use heapless::consts::U8; // type level integer used to specify capacity","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":705,"byte_end":781,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"!","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":782,"byte_end":785,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"! // on the stack","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":786,"byte_end":805,"line_start":15,"line_end":15,"column_start":1,"column_end":20}},{"value":"! let mut xs: Vec<u8, U8> = Vec::new(); // can hold up to 8 elements","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":806,"byte_end":876,"line_start":16,"line_end":16,"column_start":1,"column_end":71}},{"value":"! xs.push(42).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":877,"byte_end":902,"line_start":17,"line_end":17,"column_start":1,"column_end":26}},{"value":"! assert_eq!(xs.pop(), Some(42));","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":903,"byte_end":938,"line_start":18,"line_end":18,"column_start":1,"column_end":36}},{"value":"!","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":939,"byte_end":942,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"! // in a `static` variable","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":943,"byte_end":972,"line_start":20,"line_end":20,"column_start":1,"column_end":30}},{"value":"! // static mut XS: Vec<u8, U8> = Vec::new(); // requires feature `const-fn`","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":973,"byte_end":1051,"line_start":21,"line_end":21,"column_start":1,"column_end":79}},{"value":"!","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":1052,"byte_end":1055,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"! // work around","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":1056,"byte_end":1074,"line_start":23,"line_end":23,"column_start":1,"column_end":19}},{"value":"! static mut XS: Option<Vec<u8, U8>> = None;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":1075,"byte_end":1121,"line_start":24,"line_end":24,"column_start":1,"column_end":47}},{"value":"! unsafe { XS = Some(Vec::new()) };","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":1122,"byte_end":1159,"line_start":25,"line_end":25,"column_start":1,"column_end":38}},{"value":"! let xs = unsafe { XS.as_mut().unwrap() };","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":1160,"byte_end":1205,"line_start":26,"line_end":26,"column_start":1,"column_end":46}},{"value":"!","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":1206,"byte_end":1209,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"! xs.push(42);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":1210,"byte_end":1226,"line_start":28,"line_end":28,"column_start":1,"column_end":17}},{"value":"! assert_eq!(xs.pop(), Some(42));","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":1227,"byte_end":1262,"line_start":29,"line_end":29,"column_start":1,"column_end":36}},{"value":"!","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":1263,"byte_end":1266,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"! // in the heap (though kind of pointless because no reallocation)","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":1267,"byte_end":1336,"line_start":31,"line_end":31,"column_start":1,"column_end":70}},{"value":"! let mut ys: Box<Vec<u8, U8>> = Box::new(Vec::new());","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":1337,"byte_end":1393,"line_start":32,"line_end":32,"column_start":1,"column_end":57}},{"value":"! ys.push(42).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":1394,"byte_end":1419,"line_start":33,"line_end":33,"column_start":1,"column_end":26}},{"value":"! assert_eq!(ys.pop(), Some(42));","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":1420,"byte_end":1455,"line_start":34,"line_end":34,"column_start":1,"column_end":36}},{"value":"! ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":1456,"byte_end":1463,"line_start":35,"line_end":35,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":1464,"byte_end":1467,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"! Because they have fixed capacity `heapless` data structures don't implicitly reallocate. This","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":1468,"byte_end":1565,"line_start":37,"line_end":37,"column_start":1,"column_end":98}},{"value":"! means that operations like `heapless::Vec.push` are *truly* constant time rather than amortized","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":1566,"byte_end":1665,"line_start":38,"line_end":38,"column_start":1,"column_end":100}},{"value":"! constant time with potentially unbounded (depends on the allocator) worst case execution time","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":1666,"byte_end":1763,"line_start":39,"line_end":39,"column_start":1,"column_end":98}},{"value":"! (which is bad / unacceptable for hard real time applications).","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":1764,"byte_end":1830,"line_start":40,"line_end":40,"column_start":1,"column_end":67}},{"value":"!","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":1831,"byte_end":1834,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"! `heapless` data structures don't use a memory allocator which means no risk of an uncatchable","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":1835,"byte_end":1932,"line_start":42,"line_end":42,"column_start":1,"column_end":98}},{"value":"! Out Of Memory (OOM) condition (which defaults to abort) while performing operations","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":1933,"byte_end":2020,"line_start":43,"line_end":43,"column_start":1,"column_end":88}},{"value":"! on them. It's certainly possible to run out of capacity while growing `heapless` data","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":2021,"byte_end":2110,"line_start":44,"line_end":44,"column_start":1,"column_end":90}},{"value":"! structures, but the API lets you handle this possibility by returning a `Result` on operations","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":2111,"byte_end":2209,"line_start":45,"line_end":45,"column_start":1,"column_end":99}},{"value":"! that may exhaust the capacity of the data structure.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":2210,"byte_end":2266,"line_start":46,"line_end":46,"column_start":1,"column_end":57}},{"value":"!","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":2267,"byte_end":2270,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"! List of currently implemented data structures:","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":2271,"byte_end":2321,"line_start":48,"line_end":48,"column_start":1,"column_end":51}},{"value":"!","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":2322,"byte_end":2325,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"! - [`BinaryHeap`](binary_heap/struct.BinaryHeap.html) -- priority queue","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":2326,"byte_end":2400,"line_start":50,"line_end":50,"column_start":1,"column_end":75}},{"value":"! - [`IndexMap`](struct.IndexMap.html) -- hash table","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":2401,"byte_end":2455,"line_start":51,"line_end":51,"column_start":1,"column_end":55}},{"value":"! - [`IndexSet`](struct.IndexSet.html) -- hash set","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":2456,"byte_end":2508,"line_start":52,"line_end":52,"column_start":1,"column_end":53}},{"value":"! - [`LinearMap`](struct.LinearMap.html)","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":2509,"byte_end":2551,"line_start":53,"line_end":53,"column_start":1,"column_end":43}},{"value":"! - [`RingBuffer`](ring_buffer/struct.RingBuffer.html) -- single producer single consumer lockless","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":2552,"byte_end":2652,"line_start":54,"line_end":54,"column_start":1,"column_end":101}},{"value":"! queue","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":2653,"byte_end":2662,"line_start":55,"line_end":55,"column_start":1,"column_end":10}},{"value":"! - [`String`](struct.String.html)","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":2663,"byte_end":2699,"line_start":56,"line_end":56,"column_start":1,"column_end":37}},{"value":"! - [`Vec`](struct.Vec.html)","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":2700,"byte_end":2730,"line_start":57,"line_end":57,"column_start":1,"column_end":31}},{"value":"!","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":2731,"byte_end":2734,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"!","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":2735,"byte_end":2738,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"! In order to target the Rust stable toolchain, there are some feature gates.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":2739,"byte_end":2818,"line_start":60,"line_end":60,"column_start":1,"column_end":80}},{"value":"! The features need to be enabled in `Cargo.toml` in order to use them.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":2819,"byte_end":2892,"line_start":61,"line_end":61,"column_start":1,"column_end":74}},{"value":"! Once the underlaying features in Rust are stable,","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":2893,"byte_end":2946,"line_start":62,"line_end":62,"column_start":1,"column_end":54}},{"value":"! these feature gates might be activated by default.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":2947,"byte_end":3001,"line_start":63,"line_end":63,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":3002,"byte_end":3005,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"! Example of `Cargo.toml`:","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":3006,"byte_end":3034,"line_start":65,"line_end":65,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":3035,"byte_end":3038,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"! ```text","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":3039,"byte_end":3050,"line_start":67,"line_end":67,"column_start":1,"column_end":12}},{"value":"! ...","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":3051,"byte_end":3058,"line_start":68,"line_end":68,"column_start":1,"column_end":8}},{"value":"! [dependencies]","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":3059,"byte_end":3077,"line_start":69,"line_end":69,"column_start":1,"column_end":19}},{"value":"! heapless = { version = \"0.4.0\", features = [\"const-fn\"] }","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":3078,"byte_end":3139,"line_start":70,"line_end":70,"column_start":1,"column_end":62}},{"value":"! ...","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":3140,"byte_end":3147,"line_start":71,"line_end":71,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":3148,"byte_end":3151,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":3152,"byte_end":3159,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":3160,"byte_end":3163,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"! Currently the following features are availbale and not active by default:","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":3164,"byte_end":3241,"line_start":75,"line_end":75,"column_start":1,"column_end":78}},{"value":"!","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":3242,"byte_end":3245,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"! - `\"const-fn\"` -- Enable the nightly `const_fn` feature and make most `new` methods `const`.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":3246,"byte_end":3342,"line_start":77,"line_end":77,"column_start":1,"column_end":97}},{"value":"!      This way they can be used to initialize static memory at compile time.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":3343,"byte_end":3422,"line_start":78,"line_end":78,"column_start":1,"column_end":80}},{"value":"!","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":3423,"byte_end":3426,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"allow(warnings)","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":3429,"byte_end":3448,"line_start":82,"line_end":82,"column_start":1,"column_end":20}},{"value":"deny(missing_docs)","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":3449,"byte_end":3471,"line_start":83,"line_end":83,"column_start":1,"column_end":23}},{"value":"deny(warnings)","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":3472,"byte_end":3490,"line_start":84,"line_end":84,"column_start":1,"column_end":19}},{"value":"no_std","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":3743,"byte_end":3753,"line_start":89,"line_end":89,"column_start":1,"column_end":11}}]},{"kind":"Type","id":{"krate":0,"index":42},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":7483,"byte_end":7494,"line_start":15,"line_end":15,"column_start":10,"column_end":21},"name":"FnvIndexMap","qualname":"::indexmap::FnvIndexMap","value":"IndexMap<K, V, N, BuildHasherDefault<FnvHasher>>","parent":null,"children":[],"decl_id":null,"docs":" An `IndexMap` using the default FNV hasher\n","sig":null,"attributes":[{"value":"/ An `IndexMap` using the default FNV hasher","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":7427,"byte_end":7473,"line_start":14,"line_end":14,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":49},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":7901,"byte_end":7907,"line_start":31,"line_end":31,"column_start":12,"column_end":18},"name":"Bucket","qualname":"::indexmap::Bucket","value":"Bucket {  }","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":917},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":8026,"byte_end":8029,"line_start":39,"line_end":39,"column_start":12,"column_end":15},"name":"Pos","qualname":"::indexmap::Pos","value":"Pos {  }","parent":null,"children":[{"krate":0,"index":918}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":88},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":17254,"byte_end":17262,"line_start":313,"line_end":313,"column_start":12,"column_end":20},"name":"IndexMap","qualname":"::indexmap::IndexMap","value":"IndexMap {  }","parent":null,"children":[{"krate":0,"index":93},{"krate":0,"index":94}],"decl_id":null,"docs":" Fixed capacity [`IndexMap`](https://docs.rs/indexmap/1/indexmap/map/struct.IndexMap.html)","sig":null,"attributes":[{"value":"/ Fixed capacity [`IndexMap`](https://docs.rs/indexmap/1/indexmap/map/struct.IndexMap.html)","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":15630,"byte_end":15723,"line_start":271,"line_end":271,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":15724,"byte_end":15727,"line_start":272,"line_end":272,"column_start":1,"column_end":4}},{"value":"/ Note that the capacity of the `IndexMap` must be a power of 2.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":15728,"byte_end":15794,"line_start":273,"line_end":273,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":15795,"byte_end":15798,"line_start":274,"line_end":274,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":15799,"byte_end":15813,"line_start":275,"line_end":275,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":15814,"byte_end":15817,"line_start":276,"line_end":276,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":15818,"byte_end":15825,"line_start":277,"line_end":277,"column_start":1,"column_end":8}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":15826,"byte_end":15856,"line_start":278,"line_end":278,"column_start":1,"column_end":31}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":15857,"byte_end":15885,"line_start":279,"line_end":279,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":15886,"byte_end":15889,"line_start":280,"line_end":280,"column_start":1,"column_end":4}},{"value":"/ // A hash map with a capacity of 16 key-value pairs allocated on the stack","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":15890,"byte_end":15968,"line_start":281,"line_end":281,"column_start":1,"column_end":79}},{"value":"/ let mut book_reviews = FnvIndexMap::<_, _, U16>::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":15969,"byte_end":16028,"line_start":282,"line_end":282,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":16029,"byte_end":16032,"line_start":283,"line_end":283,"column_start":1,"column_end":4}},{"value":"/ // review some books.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":16033,"byte_end":16058,"line_start":284,"line_end":284,"column_start":1,"column_end":26}},{"value":"/ book_reviews.insert(\"Adventures of Huckleberry Finn\",    \"My favorite book.\").unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":16059,"byte_end":16150,"line_start":285,"line_end":285,"column_start":1,"column_end":92}},{"value":"/ book_reviews.insert(\"Grimms' Fairy Tales\",               \"Masterpiece.\").unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":16151,"byte_end":16237,"line_start":286,"line_end":286,"column_start":1,"column_end":87}},{"value":"/ book_reviews.insert(\"Pride and Prejudice\",               \"Very enjoyable.\").unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":16238,"byte_end":16327,"line_start":287,"line_end":287,"column_start":1,"column_end":90}},{"value":"/ book_reviews.insert(\"The Adventures of Sherlock Holmes\", \"Eye lyked it alot.\").unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":16328,"byte_end":16420,"line_start":288,"line_end":288,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":16421,"byte_end":16424,"line_start":289,"line_end":289,"column_start":1,"column_end":4}},{"value":"/ // check for a specific one.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":16425,"byte_end":16457,"line_start":290,"line_end":290,"column_start":1,"column_end":33}},{"value":"/ if !book_reviews.contains_key(\"Les Misérables\") {","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":16458,"byte_end":16512,"line_start":291,"line_end":291,"column_start":1,"column_end":54}},{"value":"/     println!(\"We've got {} reviews, but Les Misérables ain't one.\",","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":16513,"byte_end":16585,"line_start":292,"line_end":292,"column_start":1,"column_end":72}},{"value":"/              book_reviews.len());","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":16586,"byte_end":16623,"line_start":293,"line_end":293,"column_start":1,"column_end":38}},{"value":"/ }","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":16624,"byte_end":16629,"line_start":294,"line_end":294,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":16630,"byte_end":16633,"line_start":295,"line_end":295,"column_start":1,"column_end":4}},{"value":"/ // oops, this review has a lot of spelling mistakes, let's delete it.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":16634,"byte_end":16707,"line_start":296,"line_end":296,"column_start":1,"column_end":74}},{"value":"/ book_reviews.remove(\"The Adventures of Sherlock Holmes\");","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":16708,"byte_end":16769,"line_start":297,"line_end":297,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":16770,"byte_end":16773,"line_start":298,"line_end":298,"column_start":1,"column_end":4}},{"value":"/ // look up the values associated with some keys.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":16774,"byte_end":16826,"line_start":299,"line_end":299,"column_start":1,"column_end":53}},{"value":"/ let to_find = [\"Pride and Prejudice\", \"Alice's Adventure in Wonderland\"];","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":16827,"byte_end":16904,"line_start":300,"line_end":300,"column_start":1,"column_end":78}},{"value":"/ for book in &to_find {","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":16905,"byte_end":16931,"line_start":301,"line_end":301,"column_start":1,"column_end":27}},{"value":"/     match book_reviews.get(book) {","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":16932,"byte_end":16970,"line_start":302,"line_end":302,"column_start":1,"column_end":39}},{"value":"/         Some(review) => println!(\"{}: {}\", book, review),","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":16971,"byte_end":17032,"line_start":303,"line_end":303,"column_start":1,"column_end":62}},{"value":"/         None => println!(\"{} is unreviewed.\", book)","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":17033,"byte_end":17088,"line_start":304,"line_end":304,"column_start":1,"column_end":56}},{"value":"/     }","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":17089,"byte_end":17098,"line_start":305,"line_end":305,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":17099,"byte_end":17104,"line_start":306,"line_end":306,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":17105,"byte_end":17108,"line_start":307,"line_end":307,"column_start":1,"column_end":4}},{"value":"/ // iterate over everything.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":17109,"byte_end":17140,"line_start":308,"line_end":308,"column_start":1,"column_end":32}},{"value":"/ for (book, review) in &book_reviews {","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":17141,"byte_end":17182,"line_start":309,"line_end":309,"column_start":1,"column_end":42}},{"value":"/     println!(\"{}: \\\"{}\\\"\", book, review);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":17183,"byte_end":17228,"line_start":310,"line_end":310,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":17229,"byte_end":17234,"line_start":311,"line_end":311,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":17235,"byte_end":17242,"line_start":312,"line_end":312,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":17801,"byte_end":17804,"line_start":332,"line_end":332,"column_start":12,"column_end":15},"name":"new","qualname":"<IndexMap<K, V, N, BuildHasherDefault<S>>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `IndexMap`.","sig":null,"attributes":[{"value":"/ Creates an empty `IndexMap`.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":17676,"byte_end":17708,"line_start":329,"line_end":329,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":17713,"byte_end":17716,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ **NOTE** This constructor will become a `const fn` in the future","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":17721,"byte_end":17789,"line_start":331,"line_end":331,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":18179,"byte_end":18187,"line_start":348,"line_end":348,"column_start":12,"column_end":20},"name":"capacity","qualname":"<IndexMap<K, V, N, S>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the map can hold\n","sig":null,"attributes":[{"value":"/ Returns the number of elements the map can hold","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":18116,"byte_end":18167,"line_start":347,"line_end":347,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":18671,"byte_end":18675,"line_start":367,"line_end":367,"column_start":12,"column_end":16},"name":"keys","qualname":"<IndexMap<K, V, N, S>>::keys","value":"fn (&self) -> impl Iterator<Item = &K>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the keys of the map, in their order","sig":null,"attributes":[{"value":"/ Return an iterator over the keys of the map, in their order","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":18239,"byte_end":18302,"line_start":352,"line_end":352,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":18307,"byte_end":18310,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":18315,"byte_end":18322,"line_start":354,"line_end":354,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":18327,"byte_end":18357,"line_start":355,"line_end":355,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":18362,"byte_end":18390,"line_start":356,"line_end":356,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":18395,"byte_end":18398,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ let mut map = FnvIndexMap::<_, _, U16>::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":18403,"byte_end":18453,"line_start":358,"line_end":358,"column_start":5,"column_end":55}},{"value":"/ map.insert(\"a\", 1).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":18458,"byte_end":18490,"line_start":359,"line_end":359,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"b\", 2).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":18495,"byte_end":18527,"line_start":360,"line_end":360,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"c\", 3).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":18532,"byte_end":18564,"line_start":361,"line_end":361,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":18569,"byte_end":18572,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ for key in map.keys() {","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":18577,"byte_end":18604,"line_start":363,"line_end":363,"column_start":5,"column_end":32}},{"value":"/     println!(\"{}\", key);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":18609,"byte_end":18637,"line_start":364,"line_end":364,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":18642,"byte_end":18647,"line_start":365,"line_end":365,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":18652,"byte_end":18659,"line_start":366,"line_end":366,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":19219,"byte_end":19225,"line_start":386,"line_end":386,"column_start":12,"column_end":18},"name":"values","qualname":"<IndexMap<K, V, N, S>>::values","value":"fn (&self) -> impl Iterator<Item = &V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values of the map, in their order","sig":null,"attributes":[{"value":"/ Return an iterator over the values of the map, in their order","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":18783,"byte_end":18848,"line_start":371,"line_end":371,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":18853,"byte_end":18856,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":18861,"byte_end":18868,"line_start":373,"line_end":373,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":18873,"byte_end":18903,"line_start":374,"line_end":374,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":18908,"byte_end":18936,"line_start":375,"line_end":375,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":18941,"byte_end":18944,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ let mut map = FnvIndexMap::<_, _, U16>::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":18949,"byte_end":18999,"line_start":377,"line_end":377,"column_start":5,"column_end":55}},{"value":"/ map.insert(\"a\", 1).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":19004,"byte_end":19036,"line_start":378,"line_end":378,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"b\", 2).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":19041,"byte_end":19073,"line_start":379,"line_end":379,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"c\", 3).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":19078,"byte_end":19110,"line_start":380,"line_end":380,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":19115,"byte_end":19118,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ for val in map.values() {","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":19123,"byte_end":19152,"line_start":382,"line_end":382,"column_start":5,"column_end":34}},{"value":"/     println!(\"{}\", val);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":19157,"byte_end":19185,"line_start":383,"line_end":383,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":19190,"byte_end":19195,"line_start":384,"line_end":384,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":19200,"byte_end":19207,"line_start":385,"line_end":385,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":19877,"byte_end":19887,"line_start":409,"line_end":409,"column_start":12,"column_end":22},"name":"values_mut","qualname":"<IndexMap<K, V, N, S>>::values_mut","value":"fn (&mut self) -> impl Iterator<Item = &mut V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over mutable references to the the values of the map, in their order","sig":null,"attributes":[{"value":"/ Return an iterator over mutable references to the the values of the map, in their order","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":19335,"byte_end":19426,"line_start":390,"line_end":390,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":19431,"byte_end":19434,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":19439,"byte_end":19446,"line_start":392,"line_end":392,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":19451,"byte_end":19481,"line_start":393,"line_end":393,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":19486,"byte_end":19514,"line_start":394,"line_end":394,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":19519,"byte_end":19522,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ let mut map = FnvIndexMap::<_, _, U16>::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":19527,"byte_end":19577,"line_start":396,"line_end":396,"column_start":5,"column_end":55}},{"value":"/ map.insert(\"a\", 1).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":19582,"byte_end":19614,"line_start":397,"line_end":397,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"b\", 2).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":19619,"byte_end":19651,"line_start":398,"line_end":398,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"c\", 3).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":19656,"byte_end":19688,"line_start":399,"line_end":399,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":19693,"byte_end":19696,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ for val in map.values_mut() {","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":19701,"byte_end":19734,"line_start":401,"line_end":401,"column_start":5,"column_end":38}},{"value":"/     *val += 10;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":19739,"byte_end":19758,"line_start":402,"line_end":402,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":19763,"byte_end":19768,"line_start":403,"line_end":403,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":19773,"byte_end":19776,"line_start":404,"line_end":404,"column_start":5,"column_end":8}},{"value":"/ for val in map.values() {","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":19781,"byte_end":19810,"line_start":405,"line_end":405,"column_start":5,"column_end":34}},{"value":"/     println!(\"{}\", val);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":19815,"byte_end":19843,"line_start":406,"line_end":406,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":19848,"byte_end":19853,"line_start":407,"line_end":407,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":19858,"byte_end":19865,"line_start":408,"line_end":408,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":20481,"byte_end":20485,"line_start":428,"line_end":428,"column_start":12,"column_end":16},"name":"iter","qualname":"<IndexMap<K, V, N, S>>::iter","value":"fn (&self) -> Iter<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the key-value pairs of the map, in their order","sig":null,"attributes":[{"value":"/ Return an iterator over the key-value pairs of the map, in their order","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":20013,"byte_end":20087,"line_start":413,"line_end":413,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":20092,"byte_end":20095,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":20100,"byte_end":20107,"line_start":415,"line_end":415,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":20112,"byte_end":20142,"line_start":416,"line_end":416,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":20147,"byte_end":20175,"line_start":417,"line_end":417,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":20180,"byte_end":20183,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ let mut map = FnvIndexMap::<_, _, U16>::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":20188,"byte_end":20238,"line_start":419,"line_end":419,"column_start":5,"column_end":55}},{"value":"/ map.insert(\"a\", 1).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":20243,"byte_end":20275,"line_start":420,"line_end":420,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"b\", 2).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":20280,"byte_end":20312,"line_start":421,"line_end":421,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"c\", 3).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":20317,"byte_end":20349,"line_start":422,"line_end":422,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":20354,"byte_end":20357,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ for (key, val) in map.iter() {","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":20362,"byte_end":20396,"line_start":424,"line_end":424,"column_start":5,"column_end":39}},{"value":"/     println!(\"key: {} val: {}\", key, val);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":20401,"byte_end":20447,"line_start":425,"line_end":425,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":20452,"byte_end":20457,"line_start":426,"line_end":426,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":20462,"byte_end":20469,"line_start":427,"line_end":427,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":21132,"byte_end":21140,"line_start":453,"line_end":453,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<IndexMap<K, V, N, S>>::iter_mut","value":"fn (&mut self) -> IterMut<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the key-value pairs of the map, in their order","sig":null,"attributes":[{"value":"/ Return an iterator over the key-value pairs of the map, in their order","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":20589,"byte_end":20663,"line_start":434,"line_end":434,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":20668,"byte_end":20671,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":20676,"byte_end":20683,"line_start":436,"line_end":436,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":20688,"byte_end":20718,"line_start":437,"line_end":437,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":20723,"byte_end":20751,"line_start":438,"line_end":438,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":20756,"byte_end":20759,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ let mut map = FnvIndexMap::<_, _, U16>::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":20764,"byte_end":20814,"line_start":440,"line_end":440,"column_start":5,"column_end":55}},{"value":"/ map.insert(\"a\", 1).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":20819,"byte_end":20851,"line_start":441,"line_end":441,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"b\", 2).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":20856,"byte_end":20888,"line_start":442,"line_end":442,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"c\", 3).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":20893,"byte_end":20925,"line_start":443,"line_end":443,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":20930,"byte_end":20933,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ for (_, val) in map.iter_mut() {","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":20938,"byte_end":20974,"line_start":445,"line_end":445,"column_start":5,"column_end":41}},{"value":"/     *val = 2;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":20979,"byte_end":20996,"line_start":446,"line_end":446,"column_start":5,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":21001,"byte_end":21006,"line_start":447,"line_end":447,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":21011,"byte_end":21014,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ for (key, val) in &map {","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":21019,"byte_end":21047,"line_start":449,"line_end":449,"column_start":5,"column_end":33}},{"value":"/     println!(\"key: {} val: {}\", key, val);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":21052,"byte_end":21098,"line_start":450,"line_end":450,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":21103,"byte_end":21108,"line_start":451,"line_end":451,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":21113,"byte_end":21120,"line_start":452,"line_end":452,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":21699,"byte_end":21702,"line_start":475,"line_end":475,"column_start":12,"column_end":15},"name":"len","qualname":"<IndexMap<K, V, N, S>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of key-value pairs in the map.","sig":null,"attributes":[{"value":"/ Return the number of key-value pairs in the map.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":21332,"byte_end":21384,"line_start":462,"line_end":462,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":21389,"byte_end":21392,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":21397,"byte_end":21427,"line_start":464,"line_end":464,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":21432,"byte_end":21435,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":21440,"byte_end":21447,"line_start":466,"line_end":466,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":21452,"byte_end":21482,"line_start":467,"line_end":467,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":21487,"byte_end":21515,"line_start":468,"line_end":468,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":21520,"byte_end":21523,"line_start":469,"line_end":469,"column_start":5,"column_end":8}},{"value":"/ let mut a = FnvIndexMap::<_, _, U16>::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":21528,"byte_end":21576,"line_start":470,"line_end":470,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(a.len(), 0);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":21581,"byte_end":21608,"line_start":471,"line_end":471,"column_start":5,"column_end":32}},{"value":"/ a.insert(1, \"a\").unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":21613,"byte_end":21643,"line_start":472,"line_end":472,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(a.len(), 1);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":21648,"byte_end":21675,"line_start":473,"line_end":473,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":21680,"byte_end":21687,"line_start":474,"line_end":474,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":22118,"byte_end":22126,"line_start":492,"line_end":492,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndexMap<K, V, N, S>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the map contains no elements.","sig":null,"attributes":[{"value":"/ Returns true if the map contains no elements.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":21764,"byte_end":21813,"line_start":479,"line_end":479,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":21818,"byte_end":21821,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":21826,"byte_end":21856,"line_start":481,"line_end":481,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":21861,"byte_end":21864,"line_start":482,"line_end":482,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":21869,"byte_end":21876,"line_start":483,"line_end":483,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":21881,"byte_end":21911,"line_start":484,"line_end":484,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":21916,"byte_end":21944,"line_start":485,"line_end":485,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":21949,"byte_end":21952,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ let mut a = FnvIndexMap::<_, _, U16>::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":21957,"byte_end":22005,"line_start":487,"line_end":487,"column_start":5,"column_end":53}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":22010,"byte_end":22036,"line_start":488,"line_end":488,"column_start":5,"column_end":31}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":22041,"byte_end":22062,"line_start":489,"line_end":489,"column_start":5,"column_end":26}},{"value":"/ assert!(!a.is_empty());","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":22067,"byte_end":22094,"line_start":490,"line_end":490,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":22099,"byte_end":22106,"line_start":491,"line_end":491,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":22544,"byte_end":22549,"line_start":509,"line_end":509,"column_start":12,"column_end":17},"name":"clear","qualname":"<IndexMap<K, V, N, S>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove all key-value pairs in the map, while preserving its capacity.","sig":null,"attributes":[{"value":"/ Remove all key-value pairs in the map, while preserving its capacity.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":22179,"byte_end":22252,"line_start":496,"line_end":496,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":22257,"byte_end":22260,"line_start":497,"line_end":497,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":22265,"byte_end":22295,"line_start":498,"line_end":498,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":22300,"byte_end":22303,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":22308,"byte_end":22315,"line_start":500,"line_end":500,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":22320,"byte_end":22350,"line_start":501,"line_end":501,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":22355,"byte_end":22383,"line_start":502,"line_end":502,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":22388,"byte_end":22391,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ let mut a = FnvIndexMap::<_, _, U16>::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":22396,"byte_end":22444,"line_start":504,"line_end":504,"column_start":5,"column_end":53}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":22449,"byte_end":22470,"line_start":505,"line_end":505,"column_start":5,"column_end":26}},{"value":"/ a.clear();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":22475,"byte_end":22489,"line_start":506,"line_end":506,"column_start":5,"column_end":19}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":22494,"byte_end":22520,"line_start":507,"line_end":507,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":22525,"byte_end":22532,"line_start":508,"line_end":508,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":23263,"byte_end":23266,"line_start":532,"line_end":532,"column_start":12,"column_end":15},"name":"get","qualname":"<IndexMap<K, V, N, S>>::get","value":"fn <Q> (&self, key: &Q) -> Option<&V>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"/ Returns a reference to the value corresponding to the key.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":22694,"byte_end":22756,"line_start":516,"line_end":516,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":22761,"byte_end":22764,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but `Hash` and `Eq` on the borrowed","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":22769,"byte_end":22864,"line_start":518,"line_end":518,"column_start":5,"column_end":100}},{"value":"/ form *must* match those for the key type.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":22869,"byte_end":22914,"line_start":519,"line_end":519,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":22919,"byte_end":22922,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":22927,"byte_end":22967,"line_start":521,"line_end":521,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":22972,"byte_end":22975,"line_start":522,"line_end":522,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":22980,"byte_end":22987,"line_start":523,"line_end":523,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":22992,"byte_end":23022,"line_start":524,"line_end":524,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":23027,"byte_end":23055,"line_start":525,"line_end":525,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":23060,"byte_end":23063,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/ let mut map = FnvIndexMap::<_, _, U16>::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":23068,"byte_end":23118,"line_start":527,"line_end":527,"column_start":5,"column_end":55}},{"value":"/ map.insert(1, \"a\").unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":23123,"byte_end":23155,"line_start":528,"line_end":528,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(map.get(&1), Some(&\"a\"));","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":23160,"byte_end":23200,"line_start":529,"line_end":529,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(map.get(&2), None);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":23205,"byte_end":23239,"line_start":530,"line_end":530,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":23244,"byte_end":23251,"line_start":531,"line_end":531,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":24104,"byte_end":24116,"line_start":559,"line_end":559,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<IndexMap<K, V, N, S>>::contains_key","value":"fn <Q> (&self, key: &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the map contains a value for the specified key.","sig":null,"attributes":[{"value":"/ Returns true if the map contains a value for the specified key.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":23491,"byte_end":23558,"line_start":541,"line_end":541,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":23563,"byte_end":23566,"line_start":542,"line_end":542,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but `Hash` and `Eq` on the borrowed","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":23571,"byte_end":23666,"line_start":543,"line_end":543,"column_start":5,"column_end":100}},{"value":"/ form *must* match those for the key type.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":23671,"byte_end":23716,"line_start":544,"line_end":544,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":23721,"byte_end":23724,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":23729,"byte_end":23769,"line_start":546,"line_end":546,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":23774,"byte_end":23777,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":23782,"byte_end":23796,"line_start":548,"line_end":548,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":23801,"byte_end":23804,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":23809,"byte_end":23816,"line_start":550,"line_end":550,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":23821,"byte_end":23851,"line_start":551,"line_end":551,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":23856,"byte_end":23884,"line_start":552,"line_end":552,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":23889,"byte_end":23892,"line_start":553,"line_end":553,"column_start":5,"column_end":8}},{"value":"/ let mut map = FnvIndexMap::<_, _, U8>::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":23897,"byte_end":23946,"line_start":554,"line_end":554,"column_start":5,"column_end":54}},{"value":"/ map.insert(1, \"a\").unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":23951,"byte_end":23983,"line_start":555,"line_end":555,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(map.contains_key(&1), true);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":23988,"byte_end":24031,"line_start":556,"line_end":556,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(map.contains_key(&2), false);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":24036,"byte_end":24080,"line_start":557,"line_end":557,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":24085,"byte_end":24092,"line_start":558,"line_end":558,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":24885,"byte_end":24892,"line_start":587,"line_end":587,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<IndexMap<K, V, N, S>>::get_mut","value":"fn <'v, Q> (&'v mut self, key: &Q) -> Option<&'v mut V>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the value corresponding to the key.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":24257,"byte_end":24327,"line_start":567,"line_end":567,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":24332,"byte_end":24335,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but `Hash` and `Eq` on the borrowed","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":24340,"byte_end":24435,"line_start":569,"line_end":569,"column_start":5,"column_end":100}},{"value":"/ form *must* match those for the key type.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":24440,"byte_end":24485,"line_start":570,"line_end":570,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":24490,"byte_end":24493,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":24498,"byte_end":24538,"line_start":572,"line_end":572,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":24543,"byte_end":24546,"line_start":573,"line_end":573,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":24551,"byte_end":24565,"line_start":574,"line_end":574,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":24570,"byte_end":24573,"line_start":575,"line_end":575,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":24578,"byte_end":24585,"line_start":576,"line_end":576,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":24590,"byte_end":24620,"line_start":577,"line_end":577,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":24625,"byte_end":24653,"line_start":578,"line_end":578,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":24658,"byte_end":24661,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ let mut map = FnvIndexMap::<_, _, U8>::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":24666,"byte_end":24715,"line_start":580,"line_end":580,"column_start":5,"column_end":54}},{"value":"/ map.insert(1, \"a\").unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":24720,"byte_end":24752,"line_start":581,"line_end":581,"column_start":5,"column_end":37}},{"value":"/ if let Some(x) = map.get_mut(&1) {","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":24757,"byte_end":24795,"line_start":582,"line_end":582,"column_start":5,"column_end":43}},{"value":"/     *x = \"b\";","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":24800,"byte_end":24817,"line_start":583,"line_end":583,"column_start":5,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":24822,"byte_end":24827,"line_start":584,"line_end":584,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(map[&1], \"b\");","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":24832,"byte_end":24861,"line_start":585,"line_end":585,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":24866,"byte_end":24873,"line_start":586,"line_end":586,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":26237,"byte_end":26243,"line_start":627,"line_end":627,"column_start":12,"column_end":18},"name":"insert","qualname":"<IndexMap<K, V, N, S>>::insert","value":"fn (&mut self, key: K, value: V) -> Result<Option<V>, (K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a key-value pair into the map.","sig":null,"attributes":[{"value":"/ Inserts a key-value pair into the map.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":25202,"byte_end":25244,"line_start":599,"line_end":599,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":25249,"byte_end":25252,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ If an equivalent key already exists in the map: the key remains and retains in its place in","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":25257,"byte_end":25352,"line_start":601,"line_end":601,"column_start":5,"column_end":100}},{"value":"/ the order, its corresponding value is updated with `value` and the older value is returned","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":25357,"byte_end":25451,"line_start":602,"line_end":602,"column_start":5,"column_end":99}},{"value":"/ inside `Some(_)`.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":25456,"byte_end":25477,"line_start":603,"line_end":603,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":25482,"byte_end":25485,"line_start":604,"line_end":604,"column_start":5,"column_end":8}},{"value":"/ If no equivalent key existed in the map: the new key-value pair is inserted, last in order,","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":25490,"byte_end":25585,"line_start":605,"line_end":605,"column_start":5,"column_end":100}},{"value":"/ and `None` is returned.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":25590,"byte_end":25617,"line_start":606,"line_end":606,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":25622,"byte_end":25625,"line_start":607,"line_end":607,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":25630,"byte_end":25670,"line_start":608,"line_end":608,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":25675,"byte_end":25678,"line_start":609,"line_end":609,"column_start":5,"column_end":8}},{"value":"/ See also entry if you you want to insert or modify or if you need to get the index of the","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":25683,"byte_end":25776,"line_start":610,"line_end":610,"column_start":5,"column_end":98}},{"value":"/ corresponding key-value pair.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":25781,"byte_end":25814,"line_start":611,"line_end":611,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":25819,"byte_end":25822,"line_start":612,"line_end":612,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":25827,"byte_end":25841,"line_start":613,"line_end":613,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":25846,"byte_end":25849,"line_start":614,"line_end":614,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":25854,"byte_end":25861,"line_start":615,"line_end":615,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":25866,"byte_end":25896,"line_start":616,"line_end":616,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":25901,"byte_end":25929,"line_start":617,"line_end":617,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":25934,"byte_end":25937,"line_start":618,"line_end":618,"column_start":5,"column_end":8}},{"value":"/ let mut map = FnvIndexMap::<_, _, U8>::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":25942,"byte_end":25991,"line_start":619,"line_end":619,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(map.insert(37, \"a\"), Ok(None));","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":25996,"byte_end":26042,"line_start":620,"line_end":620,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(map.is_empty(), false);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":26047,"byte_end":26085,"line_start":621,"line_end":621,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":26090,"byte_end":26093,"line_start":622,"line_end":622,"column_start":5,"column_end":8}},{"value":"/ map.insert(37, \"b\");","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":26098,"byte_end":26122,"line_start":623,"line_end":623,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(map.insert(37, \"c\"), Ok(Some(\"b\")));","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":26127,"byte_end":26178,"line_start":624,"line_end":624,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(map[&37], \"c\");","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":26183,"byte_end":26213,"line_start":625,"line_end":625,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":26218,"byte_end":26225,"line_start":626,"line_end":626,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":27206,"byte_end":27212,"line_start":657,"line_end":657,"column_start":12,"column_end":18},"name":"remove","qualname":"<IndexMap<K, V, N, S>>::remove","value":"fn <Q> (&mut self, key: &Q) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Same as [`swap_remove`](struct.IndexMap.html#method.swap_remove)","sig":null,"attributes":[{"value":"/ Same as [`swap_remove`](struct.IndexMap.html#method.swap_remove)","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":26758,"byte_end":26826,"line_start":642,"line_end":642,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":26831,"byte_end":26834,"line_start":643,"line_end":643,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":26839,"byte_end":26879,"line_start":644,"line_end":644,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":26884,"byte_end":26887,"line_start":645,"line_end":645,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":26892,"byte_end":26906,"line_start":646,"line_end":646,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":26911,"byte_end":26914,"line_start":647,"line_end":647,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":26919,"byte_end":26926,"line_start":648,"line_end":648,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":26931,"byte_end":26961,"line_start":649,"line_end":649,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":26966,"byte_end":26994,"line_start":650,"line_end":650,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":26999,"byte_end":27002,"line_start":651,"line_end":651,"column_start":5,"column_end":8}},{"value":"/ let mut map = FnvIndexMap::<_, _, U8>::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":27007,"byte_end":27056,"line_start":652,"line_end":652,"column_start":5,"column_end":54}},{"value":"/ map.insert(1, \"a\").unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":27061,"byte_end":27093,"line_start":653,"line_end":653,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(map.remove(&1), Some(\"a\"));","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":27098,"byte_end":27140,"line_start":654,"line_end":654,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(map.remove(&1), None);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":27145,"byte_end":27182,"line_start":655,"line_end":655,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":27187,"byte_end":27194,"line_start":656,"line_end":656,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":27753,"byte_end":27764,"line_start":673,"line_end":673,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<IndexMap<K, V, N, S>>::swap_remove","value":"fn <Q> (&mut self, key: &Q) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return its value.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return its value.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":27359,"byte_end":27430,"line_start":665,"line_end":665,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":27435,"byte_end":27438,"line_start":666,"line_end":666,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the last element of the map","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":27443,"byte_end":27539,"line_start":667,"line_end":667,"column_start":5,"column_end":101}},{"value":"/ and popping it off. **This perturbs the postion of what used to be the last element!**","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":27544,"byte_end":27634,"line_start":668,"line_end":668,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":27639,"byte_end":27642,"line_start":669,"line_end":669,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":27647,"byte_end":27688,"line_start":670,"line_end":670,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":27693,"byte_end":27696,"line_start":671,"line_end":671,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":27701,"byte_end":27741,"line_start":672,"line_end":672,"column_start":5,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":208},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":31549,"byte_end":31553,"line_start":829,"line_end":829,"column_start":12,"column_end":16},"name":"Iter","qualname":"::indexmap::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":212}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":220},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":31879,"byte_end":31886,"line_start":849,"line_end":849,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::indexmap::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":224}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":252},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":33386,"byte_end":33397,"line_start":12,"line_end":12,"column_start":10,"column_end":21},"name":"FnvIndexSet","qualname":"::indexset::FnvIndexSet","value":"IndexSet<T, N, BuildHasherDefault<FnvHasher>>","parent":null,"children":[],"decl_id":null,"docs":" An `IndexSet` using the default FNV hasher\n","sig":null,"attributes":[{"value":"/ An `IndexSet` using the default FNV hasher","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":33330,"byte_end":33376,"line_start":11,"line_end":11,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":255},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":34425,"byte_end":34433,"line_start":47,"line_end":47,"column_start":12,"column_end":20},"name":"IndexSet","qualname":"::indexset::IndexSet","value":"IndexSet {  }","parent":null,"children":[{"krate":0,"index":259}],"decl_id":null,"docs":" Fixed capacity [`IndexSet`](https://docs.rs/indexmap/1/indexmap/set/struct.IndexSet.html)","sig":null,"attributes":[{"value":"/ Fixed capacity [`IndexSet`](https://docs.rs/indexmap/1/indexmap/set/struct.IndexSet.html)","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":33454,"byte_end":33547,"line_start":14,"line_end":14,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":33548,"byte_end":33551,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Note that the capacity of the `IndexSet` must be a power of 2.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":33552,"byte_end":33618,"line_start":16,"line_end":16,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":33619,"byte_end":33622,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":33623,"byte_end":33637,"line_start":18,"line_end":18,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":33638,"byte_end":33641,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":33642,"byte_end":33649,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":33650,"byte_end":33680,"line_start":21,"line_end":21,"column_start":1,"column_end":31}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":33681,"byte_end":33709,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":33710,"byte_end":33713,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ // A hash set with a capacity of 16 elements allocated on the stack","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":33714,"byte_end":33785,"line_start":24,"line_end":24,"column_start":1,"column_end":72}},{"value":"/ let mut books = FnvIndexSet::<_, U16>::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":33786,"byte_end":33835,"line_start":25,"line_end":25,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":33836,"byte_end":33839,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ // Add some books.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":33840,"byte_end":33862,"line_start":27,"line_end":27,"column_start":1,"column_end":23}},{"value":"/ books.insert(\"A Dance With Dragons\").unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":33863,"byte_end":33913,"line_start":28,"line_end":28,"column_start":1,"column_end":51}},{"value":"/ books.insert(\"To Kill a Mockingbird\").unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":33914,"byte_end":33965,"line_start":29,"line_end":29,"column_start":1,"column_end":52}},{"value":"/ books.insert(\"The Odyssey\").unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":33966,"byte_end":34007,"line_start":30,"line_end":30,"column_start":1,"column_end":42}},{"value":"/ books.insert(\"The Great Gatsby\").unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":34008,"byte_end":34054,"line_start":31,"line_end":31,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":34055,"byte_end":34058,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ // Check for a specific one.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":34059,"byte_end":34091,"line_start":33,"line_end":33,"column_start":1,"column_end":33}},{"value":"/ if !books.contains(\"The Winds of Winter\") {","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":34092,"byte_end":34139,"line_start":34,"line_end":34,"column_start":1,"column_end":48}},{"value":"/     println!(\"We have {} books, but The Winds of Winter ain't one.\",","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":34140,"byte_end":34212,"line_start":35,"line_end":35,"column_start":1,"column_end":73}},{"value":"/              books.len());","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":34213,"byte_end":34243,"line_start":36,"line_end":36,"column_start":1,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":34244,"byte_end":34249,"line_start":37,"line_end":37,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":34250,"byte_end":34253,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ // Remove a book.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":34254,"byte_end":34275,"line_start":39,"line_end":39,"column_start":1,"column_end":22}},{"value":"/ books.remove(\"The Odyssey\");","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":34276,"byte_end":34308,"line_start":40,"line_end":40,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":34309,"byte_end":34312,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ // Iterate over everything.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":34313,"byte_end":34344,"line_start":42,"line_end":42,"column_start":1,"column_end":32}},{"value":"/ for book in &books {","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":34345,"byte_end":34369,"line_start":43,"line_end":43,"column_start":1,"column_end":25}},{"value":"/     println!(\"{}\", book);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":34370,"byte_end":34399,"line_start":44,"line_end":44,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":34400,"byte_end":34405,"line_start":45,"line_end":45,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":34406,"byte_end":34413,"line_start":46,"line_end":46,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":34791,"byte_end":34794,"line_start":62,"line_end":62,"column_start":12,"column_end":15},"name":"new","qualname":"<IndexSet<T, N, BuildHasherDefault<S>>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `IndexSet`\n","sig":null,"attributes":[{"value":"/ Creates an empty `IndexSet`","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":34748,"byte_end":34779,"line_start":61,"line_end":61,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":35311,"byte_end":35319,"line_start":86,"line_end":86,"column_start":12,"column_end":20},"name":"capacity","qualname":"<IndexSet<T, N, S>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the set can hold","sig":null,"attributes":[{"value":"/ Returns the number of elements the set can hold","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":35023,"byte_end":35074,"line_start":75,"line_end":75,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":35079,"byte_end":35082,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":35087,"byte_end":35101,"line_start":77,"line_end":77,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":35106,"byte_end":35109,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":35114,"byte_end":35121,"line_start":79,"line_end":79,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":35126,"byte_end":35156,"line_start":80,"line_end":80,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":35161,"byte_end":35189,"line_start":81,"line_end":81,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":35194,"byte_end":35197,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ let set = FnvIndexSet::<i32, U16>::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":35202,"byte_end":35247,"line_start":83,"line_end":83,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(set.capacity(), 16);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":35252,"byte_end":35287,"line_start":84,"line_end":84,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":35292,"byte_end":35299,"line_start":85,"line_end":85,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":35833,"byte_end":35837,"line_start":107,"line_end":107,"column_start":12,"column_end":16},"name":"iter","qualname":"<IndexSet<T, N, S>>::iter","value":"fn (&self) -> Iter<T>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values of the set, in their order","sig":null,"attributes":[{"value":"/ Return an iterator over the values of the set, in their order","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":35377,"byte_end":35442,"line_start":90,"line_end":90,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":35447,"byte_end":35450,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":35455,"byte_end":35469,"line_start":92,"line_end":92,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":35474,"byte_end":35477,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":35482,"byte_end":35489,"line_start":94,"line_end":94,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":35494,"byte_end":35524,"line_start":95,"line_end":95,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":35529,"byte_end":35557,"line_start":96,"line_end":96,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":35562,"byte_end":35565,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ let mut set = FnvIndexSet::<_, U16>::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":35570,"byte_end":35617,"line_start":98,"line_end":98,"column_start":5,"column_end":52}},{"value":"/ set.insert(\"a\").unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":35622,"byte_end":35651,"line_start":99,"line_end":99,"column_start":5,"column_end":34}},{"value":"/ set.insert(\"b\").unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":35656,"byte_end":35685,"line_start":100,"line_end":100,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":35690,"byte_end":35693,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ // Will print in an arbitrary order.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":35698,"byte_end":35738,"line_start":102,"line_end":102,"column_start":5,"column_end":45}},{"value":"/ for x in set.iter() {","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":35743,"byte_end":35768,"line_start":103,"line_end":103,"column_start":5,"column_end":30}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":35773,"byte_end":35799,"line_start":104,"line_end":104,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":35804,"byte_end":35809,"line_start":105,"line_end":105,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":35814,"byte_end":35821,"line_start":106,"line_end":106,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":36868,"byte_end":36878,"line_start":138,"line_end":138,"column_start":12,"column_end":22},"name":"difference","qualname":"<IndexSet<T, N, S>>::difference","value":"fn <'a, N2, S2> (&'a self, other: &'a IndexSet<T, N2, S2>) -> Difference<'a, T, N2, S2>","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the difference, i.e. the values that are in `self` but not in\n `other`.","sig":null,"attributes":[{"value":"/ Visits the values representing the difference, i.e. the values that are in `self` but not in","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":35929,"byte_end":36025,"line_start":113,"line_end":113,"column_start":5,"column_end":101}},{"value":"/ `other`.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":36030,"byte_end":36042,"line_start":114,"line_end":114,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":36047,"byte_end":36050,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":36055,"byte_end":36069,"line_start":116,"line_end":116,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":36074,"byte_end":36077,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":36082,"byte_end":36089,"line_start":118,"line_end":118,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":36094,"byte_end":36124,"line_start":119,"line_end":119,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":36129,"byte_end":36157,"line_start":120,"line_end":120,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":36162,"byte_end":36165,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ let mut a: FnvIndexSet<_, U16> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":36170,"byte_end":36243,"line_start":122,"line_end":122,"column_start":5,"column_end":78}},{"value":"/ let mut b: FnvIndexSet<_, U16> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":36248,"byte_end":36324,"line_start":123,"line_end":123,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":36329,"byte_end":36332,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ // Can be seen as `a - b`.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":36337,"byte_end":36367,"line_start":125,"line_end":125,"column_start":5,"column_end":35}},{"value":"/ for x in a.difference(&b) {","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":36372,"byte_end":36403,"line_start":126,"line_end":126,"column_start":5,"column_end":36}},{"value":"/     println!(\"{}\", x); // Print 1","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":36408,"byte_end":36445,"line_start":127,"line_end":127,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":36450,"byte_end":36455,"line_start":128,"line_end":128,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":36460,"byte_end":36463,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ let diff: FnvIndexSet<_, U16> = a.difference(&b).collect();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":36468,"byte_end":36531,"line_start":130,"line_end":130,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(diff, [1].iter().collect::<FnvIndexSet<_, U16>>());","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":36536,"byte_end":36602,"line_start":131,"line_end":131,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":36607,"byte_end":36610,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ // Note that difference is not symmetric,","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":36615,"byte_end":36660,"line_start":133,"line_end":133,"column_start":5,"column_end":50}},{"value":"/ // and `b - a` means something else:","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":36665,"byte_end":36705,"line_start":134,"line_end":134,"column_start":5,"column_end":45}},{"value":"/ let diff: FnvIndexSet<_, U16> = b.difference(&a).collect();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":36710,"byte_end":36773,"line_start":135,"line_end":135,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(diff, [4].iter().collect::<FnvIndexSet<_, U16>>());","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":36778,"byte_end":36844,"line_start":136,"line_end":136,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":36849,"byte_end":36856,"line_start":137,"line_end":137,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":38046,"byte_end":38066,"line_start":175,"line_end":175,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<IndexSet<T, N, S>>::symmetric_difference","value":"fn <'a, N2, S2> (&'a self, other: &'a IndexSet<T, N2, S2>) -> impl Iterator<Item = &'a T>","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the symmetric difference, i.e. the values that are in `self`\n or in `other` but not in both.","sig":null,"attributes":[{"value":"/ Visits the values representing the symmetric difference, i.e. the values that are in `self`","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":37185,"byte_end":37280,"line_start":152,"line_end":152,"column_start":5,"column_end":100}},{"value":"/ or in `other` but not in both.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":37285,"byte_end":37319,"line_start":153,"line_end":153,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":37324,"byte_end":37327,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":37332,"byte_end":37346,"line_start":155,"line_end":155,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":37351,"byte_end":37354,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":37359,"byte_end":37366,"line_start":157,"line_end":157,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":37371,"byte_end":37401,"line_start":158,"line_end":158,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":37406,"byte_end":37434,"line_start":159,"line_end":159,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":37439,"byte_end":37442,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ let mut a: FnvIndexSet<_, U16> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":37447,"byte_end":37520,"line_start":161,"line_end":161,"column_start":5,"column_end":78}},{"value":"/ let mut b: FnvIndexSet<_, U16> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":37525,"byte_end":37601,"line_start":162,"line_end":162,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":37606,"byte_end":37609,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ // Print 1, 4 in that order order.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":37614,"byte_end":37652,"line_start":164,"line_end":164,"column_start":5,"column_end":43}},{"value":"/ for x in a.symmetric_difference(&b) {","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":37657,"byte_end":37698,"line_start":165,"line_end":165,"column_start":5,"column_end":46}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":37703,"byte_end":37729,"line_start":166,"line_end":166,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":37734,"byte_end":37739,"line_start":167,"line_end":167,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":37744,"byte_end":37747,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ let diff1: FnvIndexSet<_, U16> = a.symmetric_difference(&b).collect();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":37752,"byte_end":37826,"line_start":169,"line_end":169,"column_start":5,"column_end":79}},{"value":"/ let diff2: FnvIndexSet<_, U16> = b.symmetric_difference(&a).collect();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":37831,"byte_end":37905,"line_start":170,"line_end":170,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":37910,"byte_end":37913,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(diff1, diff2);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":37918,"byte_end":37947,"line_start":172,"line_end":172,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(diff1, [1, 4].iter().collect::<FnvIndexSet<_, U16>>());","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":37952,"byte_end":38022,"line_start":173,"line_end":173,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":38027,"byte_end":38034,"line_start":174,"line_end":174,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":39066,"byte_end":39078,"line_start":206,"line_end":206,"column_start":12,"column_end":24},"name":"intersection","qualname":"<IndexSet<T, N, S>>::intersection","value":"fn <'a, N2, S2> (&'a self, other: &'a IndexSet<T, N2, S2>) -> Intersection<'a, T, N2, S2>","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the intersection, i.e. the values that are both in `self` and\n `other`.","sig":null,"attributes":[{"value":"/ Visits the values representing the intersection, i.e. the values that are both in `self` and","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":38355,"byte_end":38451,"line_start":186,"line_end":186,"column_start":5,"column_end":101}},{"value":"/ `other`.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":38456,"byte_end":38468,"line_start":187,"line_end":187,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":38473,"byte_end":38476,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":38481,"byte_end":38495,"line_start":189,"line_end":189,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":38500,"byte_end":38503,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":38508,"byte_end":38515,"line_start":191,"line_end":191,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":38520,"byte_end":38550,"line_start":192,"line_end":192,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":38555,"byte_end":38583,"line_start":193,"line_end":193,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":38588,"byte_end":38591,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ let mut a: FnvIndexSet<_, U16> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":38596,"byte_end":38669,"line_start":195,"line_end":195,"column_start":5,"column_end":78}},{"value":"/ let mut b: FnvIndexSet<_, U16> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":38674,"byte_end":38750,"line_start":196,"line_end":196,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":38755,"byte_end":38758,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ // Print 2, 3 in that order.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":38763,"byte_end":38795,"line_start":198,"line_end":198,"column_start":5,"column_end":37}},{"value":"/ for x in a.intersection(&b) {","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":38800,"byte_end":38833,"line_start":199,"line_end":199,"column_start":5,"column_end":38}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":38838,"byte_end":38864,"line_start":200,"line_end":200,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":38869,"byte_end":38874,"line_start":201,"line_end":201,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":38879,"byte_end":38882,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ let intersection: FnvIndexSet<_, U16> = a.intersection(&b).collect();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":38887,"byte_end":38960,"line_start":203,"line_end":203,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(intersection, [2, 3].iter().collect::<FnvIndexSet<_, U16>>());","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":38965,"byte_end":39042,"line_start":204,"line_end":204,"column_start":5,"column_end":82}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":39047,"byte_end":39054,"line_start":205,"line_end":205,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":40086,"byte_end":40091,"line_start":240,"line_end":240,"column_start":12,"column_end":17},"name":"union","qualname":"<IndexSet<T, N, S>>::union","value":"fn <'a, N2, S2> (&'a self, other: &'a IndexSet<T, N2, S2>) -> impl Iterator<Item = &'a T>","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the union, i.e. all the values in `self` or `other`, without\n duplicates.","sig":null,"attributes":[{"value":"/ Visits the values representing the union, i.e. all the values in `self` or `other`, without","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":39389,"byte_end":39484,"line_start":220,"line_end":220,"column_start":5,"column_end":100}},{"value":"/ duplicates.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":39489,"byte_end":39504,"line_start":221,"line_end":221,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":39509,"byte_end":39512,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":39517,"byte_end":39531,"line_start":223,"line_end":223,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":39536,"byte_end":39539,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":39544,"byte_end":39551,"line_start":225,"line_end":225,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":39556,"byte_end":39586,"line_start":226,"line_end":226,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":39591,"byte_end":39619,"line_start":227,"line_end":227,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":39624,"byte_end":39627,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ let mut a: FnvIndexSet<_, U16> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":39632,"byte_end":39705,"line_start":229,"line_end":229,"column_start":5,"column_end":78}},{"value":"/ let mut b: FnvIndexSet<_, U16> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":39710,"byte_end":39786,"line_start":230,"line_end":230,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":39791,"byte_end":39794,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ // Print 1, 2, 3, 4 in that order.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":39799,"byte_end":39837,"line_start":232,"line_end":232,"column_start":5,"column_end":43}},{"value":"/ for x in a.union(&b) {","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":39842,"byte_end":39868,"line_start":233,"line_end":233,"column_start":5,"column_end":31}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":39873,"byte_end":39899,"line_start":234,"line_end":234,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":39904,"byte_end":39909,"line_start":235,"line_end":235,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":39914,"byte_end":39917,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ let union: FnvIndexSet<_, U16> = a.union(&b).collect();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":39922,"byte_end":39981,"line_start":237,"line_end":237,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(union, [1, 2, 3, 4].iter().collect::<FnvIndexSet<_, U16>>());","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":39986,"byte_end":40062,"line_start":238,"line_end":238,"column_start":5,"column_end":81}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":40067,"byte_end":40074,"line_start":239,"line_end":239,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":40717,"byte_end":40720,"line_start":264,"line_end":264,"column_start":12,"column_end":15},"name":"len","qualname":"<IndexSet<T, N, S>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the set.","sig":null,"attributes":[{"value":"/ Returns the number of elements in the set.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":40369,"byte_end":40415,"line_start":251,"line_end":251,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":40420,"byte_end":40423,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":40428,"byte_end":40442,"line_start":253,"line_end":253,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":40447,"byte_end":40450,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":40455,"byte_end":40462,"line_start":255,"line_end":255,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":40467,"byte_end":40497,"line_start":256,"line_end":256,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":40502,"byte_end":40530,"line_start":257,"line_end":257,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":40535,"byte_end":40538,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ let mut v: FnvIndexSet<_, U16> = FnvIndexSet::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":40543,"byte_end":40599,"line_start":259,"line_end":259,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(v.len(), 0);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":40604,"byte_end":40631,"line_start":260,"line_end":260,"column_start":5,"column_end":32}},{"value":"/ v.insert(1).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":40636,"byte_end":40661,"line_start":261,"line_end":261,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(v.len(), 1);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":40666,"byte_end":40693,"line_start":262,"line_end":262,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":40698,"byte_end":40705,"line_start":263,"line_end":263,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":41125,"byte_end":41133,"line_start":281,"line_end":281,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndexSet<T, N, S>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set contains no elements.","sig":null,"attributes":[{"value":"/ Returns `true` if the set contains no elements.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":40773,"byte_end":40824,"line_start":268,"line_end":268,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":40829,"byte_end":40832,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":40837,"byte_end":40851,"line_start":270,"line_end":270,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":40856,"byte_end":40859,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":40864,"byte_end":40871,"line_start":272,"line_end":272,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":40876,"byte_end":40906,"line_start":273,"line_end":273,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":40911,"byte_end":40939,"line_start":274,"line_end":274,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":40944,"byte_end":40947,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ let mut v: FnvIndexSet<_, U16> = FnvIndexSet::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":40952,"byte_end":41008,"line_start":276,"line_end":276,"column_start":5,"column_end":61}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":41013,"byte_end":41039,"line_start":277,"line_end":277,"column_start":5,"column_end":31}},{"value":"/ v.insert(1).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":41044,"byte_end":41069,"line_start":278,"line_end":278,"column_start":5,"column_end":30}},{"value":"/ assert!(!v.is_empty());","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":41074,"byte_end":41101,"line_start":279,"line_end":279,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":41106,"byte_end":41113,"line_start":280,"line_end":280,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":41518,"byte_end":41523,"line_start":298,"line_end":298,"column_start":12,"column_end":17},"name":"clear","qualname":"<IndexSet<T, N, S>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears the set, removing all values.","sig":null,"attributes":[{"value":"/ Clears the set, removing all values.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":41190,"byte_end":41230,"line_start":285,"line_end":285,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":41235,"byte_end":41238,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":41243,"byte_end":41257,"line_start":287,"line_end":287,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":41262,"byte_end":41265,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":41270,"byte_end":41277,"line_start":289,"line_end":289,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":41282,"byte_end":41312,"line_start":290,"line_end":290,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":41317,"byte_end":41345,"line_start":291,"line_end":291,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":41350,"byte_end":41353,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ let mut v: FnvIndexSet<_, U16> = FnvIndexSet::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":41358,"byte_end":41414,"line_start":293,"line_end":293,"column_start":5,"column_end":61}},{"value":"/ v.insert(1).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":41419,"byte_end":41444,"line_start":294,"line_end":294,"column_start":5,"column_end":30}},{"value":"/ v.clear();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":41449,"byte_end":41463,"line_start":295,"line_end":295,"column_start":5,"column_end":19}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":41468,"byte_end":41494,"line_start":296,"line_end":296,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":41499,"byte_end":41506,"line_start":297,"line_end":297,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":42094,"byte_end":42102,"line_start":317,"line_end":317,"column_start":12,"column_end":20},"name":"contains","qualname":"<IndexSet<T, N, S>>::contains","value":"fn <Q> (&self, value: &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set contains a value.","sig":null,"attributes":[{"value":"/ Returns `true` if the set contains a value.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":41573,"byte_end":41620,"line_start":302,"line_end":302,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":41625,"byte_end":41628,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but `Hash` and `Eq` on the","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":41633,"byte_end":41723,"line_start":304,"line_end":304,"column_start":5,"column_end":95}},{"value":"/ borrowed form must match those for the value type.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":41728,"byte_end":41782,"line_start":305,"line_end":305,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":41787,"byte_end":41790,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":41795,"byte_end":41809,"line_start":307,"line_end":307,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":41814,"byte_end":41817,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":41822,"byte_end":41829,"line_start":309,"line_end":309,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":41834,"byte_end":41864,"line_start":310,"line_end":310,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":41869,"byte_end":41897,"line_start":311,"line_end":311,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":41902,"byte_end":41905,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ let set: FnvIndexSet<_, U16> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":41910,"byte_end":41981,"line_start":313,"line_end":313,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(set.contains(&1), true);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":41986,"byte_end":42025,"line_start":314,"line_end":314,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(set.contains(&4), false);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":42030,"byte_end":42070,"line_start":315,"line_end":315,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":42075,"byte_end":42082,"line_start":316,"line_end":316,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":42858,"byte_end":42869,"line_start":343,"line_end":343,"column_start":12,"column_end":23},"name":"is_disjoint","qualname":"<IndexSet<T, N, S>>::is_disjoint","value":"fn <N2, S2> (&self, other: &IndexSet<T, N2, S2>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `self` has no elements in common with `other`. This is equivalent to\n checking for an empty intersection.","sig":null,"attributes":[{"value":"/ Returns `true` if `self` has no elements in common with `other`. This is equivalent to","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":42249,"byte_end":42339,"line_start":325,"line_end":325,"column_start":5,"column_end":95}},{"value":"/ checking for an empty intersection.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":42344,"byte_end":42383,"line_start":326,"line_end":326,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":42388,"byte_end":42391,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":42396,"byte_end":42410,"line_start":328,"line_end":328,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":42415,"byte_end":42418,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":42423,"byte_end":42430,"line_start":330,"line_end":330,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":42435,"byte_end":42465,"line_start":331,"line_end":331,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":42470,"byte_end":42498,"line_start":332,"line_end":332,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":42503,"byte_end":42506,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ let a: FnvIndexSet<_, U16> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":42511,"byte_end":42580,"line_start":334,"line_end":334,"column_start":5,"column_end":74}},{"value":"/ let mut b = FnvIndexSet::<_, U16>::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":42585,"byte_end":42630,"line_start":335,"line_end":335,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":42635,"byte_end":42638,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.is_disjoint(&b), true);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":42643,"byte_end":42683,"line_start":337,"line_end":337,"column_start":5,"column_end":45}},{"value":"/ b.insert(4).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":42688,"byte_end":42713,"line_start":338,"line_end":338,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.is_disjoint(&b), true);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":42718,"byte_end":42758,"line_start":339,"line_end":339,"column_start":5,"column_end":45}},{"value":"/ b.insert(1).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":42763,"byte_end":42788,"line_start":340,"line_end":340,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.is_disjoint(&b), false);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":42793,"byte_end":42834,"line_start":341,"line_end":341,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":42839,"byte_end":42846,"line_start":342,"line_end":342,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":43696,"byte_end":43705,"line_start":369,"line_end":369,"column_start":12,"column_end":21},"name":"is_subset","qualname":"<IndexSet<T, N, S>>::is_subset","value":"fn <N2, S2> (&self, other: &IndexSet<T, N2, S2>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set is a subset of another, i.e. `other` contains at least all the\n values in `self`.","sig":null,"attributes":[{"value":"/ Returns `true` if the set is a subset of another, i.e. `other` contains at least all the","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":43089,"byte_end":43181,"line_start":351,"line_end":351,"column_start":5,"column_end":97}},{"value":"/ values in `self`.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":43186,"byte_end":43207,"line_start":352,"line_end":352,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":43212,"byte_end":43215,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":43220,"byte_end":43234,"line_start":354,"line_end":354,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":43239,"byte_end":43242,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":43247,"byte_end":43254,"line_start":356,"line_end":356,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":43259,"byte_end":43289,"line_start":357,"line_end":357,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":43294,"byte_end":43322,"line_start":358,"line_end":358,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":43327,"byte_end":43330,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ let sup: FnvIndexSet<_, U16> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":43335,"byte_end":43406,"line_start":360,"line_end":360,"column_start":5,"column_end":76}},{"value":"/ let mut set = FnvIndexSet::<_, U16>::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":43411,"byte_end":43458,"line_start":361,"line_end":361,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":43463,"byte_end":43466,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.is_subset(&sup), true);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":43471,"byte_end":43513,"line_start":363,"line_end":363,"column_start":5,"column_end":47}},{"value":"/ set.insert(2).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":43518,"byte_end":43545,"line_start":364,"line_end":364,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(set.is_subset(&sup), true);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":43550,"byte_end":43592,"line_start":365,"line_end":365,"column_start":5,"column_end":47}},{"value":"/ set.insert(4).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":43597,"byte_end":43624,"line_start":366,"line_end":366,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(set.is_subset(&sup), false);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":43629,"byte_end":43672,"line_start":367,"line_end":367,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":43677,"byte_end":43684,"line_start":368,"line_end":368,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":44583,"byte_end":44594,"line_start":398,"line_end":398,"column_start":12,"column_end":23},"name":"is_superset","qualname":"<IndexSet<T, N, S>>::is_superset","value":"fn <N2, S2> (&self, other: &IndexSet<T, N2, S2>) -> bool","parent":null,"children":[],"decl_id":null,"docs":"\n # Examples","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":44047,"byte_end":44050,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":44055,"byte_end":44069,"line_start":380,"line_end":380,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":44074,"byte_end":44077,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":44082,"byte_end":44089,"line_start":382,"line_end":382,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":44094,"byte_end":44124,"line_start":383,"line_end":383,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":44129,"byte_end":44157,"line_start":384,"line_end":384,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":44162,"byte_end":44165,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ let sub: FnvIndexSet<_, U16> = [1, 2].iter().cloned().collect();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":44170,"byte_end":44238,"line_start":386,"line_end":386,"column_start":5,"column_end":73}},{"value":"/ let mut set = FnvIndexSet::<_, U16>::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":44243,"byte_end":44290,"line_start":387,"line_end":387,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":44295,"byte_end":44298,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.is_superset(&sub), false);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":44303,"byte_end":44348,"line_start":389,"line_end":389,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":44353,"byte_end":44356,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ set.insert(0).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":44361,"byte_end":44388,"line_start":391,"line_end":391,"column_start":5,"column_end":32}},{"value":"/ set.insert(1).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":44393,"byte_end":44420,"line_start":392,"line_end":392,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(set.is_superset(&sub), false);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":44425,"byte_end":44470,"line_start":393,"line_end":393,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":44475,"byte_end":44478,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ set.insert(2).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":44483,"byte_end":44510,"line_start":395,"line_end":395,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(set.is_superset(&sub), true);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":44515,"byte_end":44559,"line_start":396,"line_end":396,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":44564,"byte_end":44571,"line_start":397,"line_end":397,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":45323,"byte_end":45329,"line_start":424,"line_end":424,"column_start":12,"column_end":18},"name":"insert","qualname":"<IndexSet<T, N, S>>::insert","value":"fn (&mut self, value: T) -> Result<bool, T>","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set.","sig":null,"attributes":[{"value":"/ Adds a value to the set.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":44796,"byte_end":44824,"line_start":406,"line_end":406,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":44829,"byte_end":44832,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ If the set did not have this value present, `true` is returned.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":44837,"byte_end":44904,"line_start":408,"line_end":408,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":44909,"byte_end":44912,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ If the set did have this value present, `false` is returned.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":44917,"byte_end":44981,"line_start":410,"line_end":410,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":44986,"byte_end":44989,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":44994,"byte_end":45008,"line_start":412,"line_end":412,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":45013,"byte_end":45016,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":45021,"byte_end":45028,"line_start":414,"line_end":414,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":45033,"byte_end":45063,"line_start":415,"line_end":415,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":45068,"byte_end":45096,"line_start":416,"line_end":416,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":45101,"byte_end":45104,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ let mut set = FnvIndexSet::<_, U16>::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":45109,"byte_end":45156,"line_start":418,"line_end":418,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":45161,"byte_end":45164,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.insert(2).unwrap(), true);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":45169,"byte_end":45214,"line_start":420,"line_end":420,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(set.insert(2).unwrap(), false);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":45219,"byte_end":45265,"line_start":421,"line_end":421,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(set.len(), 1);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":45270,"byte_end":45299,"line_start":422,"line_end":422,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":45304,"byte_end":45311,"line_start":423,"line_end":423,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":46073,"byte_end":46079,"line_start":448,"line_end":448,"column_start":12,"column_end":18},"name":"remove","qualname":"<IndexSet<T, N, S>>::remove","value":"fn <Q> (&mut self, value: &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Removes a value from the set. Returns `true` if the value was present in the set.","sig":null,"attributes":[{"value":"/ Removes a value from the set. Returns `true` if the value was present in the set.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":45502,"byte_end":45587,"line_start":431,"line_end":431,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":45592,"byte_end":45595,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but `Hash` and `Eq` on the","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":45600,"byte_end":45690,"line_start":433,"line_end":433,"column_start":5,"column_end":95}},{"value":"/ borrowed form must match those for the value type.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":45695,"byte_end":45749,"line_start":434,"line_end":434,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":45754,"byte_end":45757,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":45762,"byte_end":45776,"line_start":436,"line_end":436,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":45781,"byte_end":45784,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":45789,"byte_end":45796,"line_start":438,"line_end":438,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":45801,"byte_end":45831,"line_start":439,"line_end":439,"column_start":5,"column_end":35}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":45836,"byte_end":45864,"line_start":440,"line_end":440,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":45869,"byte_end":45872,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ let mut set = FnvIndexSet::<_, U16>::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":45877,"byte_end":45924,"line_start":442,"line_end":442,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":45929,"byte_end":45932,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ set.insert(2).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":45937,"byte_end":45964,"line_start":444,"line_end":444,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(set.remove(&2), true);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":45969,"byte_end":46006,"line_start":445,"line_end":445,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(set.remove(&2), false);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":46011,"byte_end":46049,"line_start":446,"line_end":446,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":46054,"byte_end":46061,"line_start":447,"line_end":447,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":355},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":48478,"byte_end":48482,"line_start":552,"line_end":552,"column_start":12,"column_end":16},"name":"Iter","qualname":"::indexset::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":358}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":365},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":48737,"byte_end":48747,"line_start":570,"line_end":570,"column_start":12,"column_end":22},"name":"Difference","qualname":"::indexset::Difference","value":"Difference {  }","parent":null,"children":[{"krate":0,"index":370},{"krate":0,"index":371}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":379},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":49370,"byte_end":49382,"line_start":598,"line_end":598,"column_start":12,"column_end":24},"name":"Intersection","qualname":"::indexset::Intersection","value":"Intersection {  }","parent":null,"children":[{"krate":0,"index":384},{"krate":0,"index":385}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":401},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":50281,"byte_end":50290,"line_start":11,"line_end":11,"column_start":12,"column_end":21},"name":"LinearMap","qualname":"::linear_map::LinearMap","value":"LinearMap {  }","parent":null,"children":[{"krate":0,"index":405}],"decl_id":null,"docs":" A fixed capacity map / dictionary that performs lookups via linear search","sig":null,"attributes":[{"value":"/ A fixed capacity map / dictionary that performs lookups via linear search","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":50094,"byte_end":50171,"line_start":8,"line_end":8,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":50172,"byte_end":50175,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ Note that as this map doesn't use hashing so most operations are **O(N)** instead of O(1)","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":50176,"byte_end":50269,"line_start":10,"line_end":10,"column_start":1,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":926},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":50773,"byte_end":50776,"line_start":36,"line_end":36,"column_start":22,"column_end":25},"name":"new","qualname":"<LinearMap<K, V, N>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `LinearMap`","sig":null,"attributes":[{"value":"cfg(not(feature = \"const-fn\"))","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/const_fn.rs","byte_start":4992,"byte_end":5025,"line_start":23,"line_end":23,"column_start":9,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":51206,"byte_end":51214,"line_start":54,"line_end":54,"column_start":12,"column_end":20},"name":"capacity","qualname":"<LinearMap<K, V, N>>::capacity","value":"fn (&mut self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements that the map can hold","sig":null,"attributes":[{"value":"/ Returns the number of elements that the map can hold","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":50856,"byte_end":50912,"line_start":41,"line_end":41,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":50917,"byte_end":50920,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":50925,"byte_end":50954,"line_start":43,"line_end":43,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":50959,"byte_end":50962,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":50967,"byte_end":50981,"line_start":45,"line_end":45,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":50986,"byte_end":50989,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":50994,"byte_end":51001,"line_start":47,"line_end":47,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":51006,"byte_end":51034,"line_start":48,"line_end":48,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":51039,"byte_end":51067,"line_start":49,"line_end":49,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":51072,"byte_end":51075,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<&str, isize, U8> = LinearMap::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":51080,"byte_end":51143,"line_start":51,"line_end":51,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(map.capacity(), 8);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":51148,"byte_end":51182,"line_start":52,"line_end":52,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":51187,"byte_end":51194,"line_start":53,"line_end":53,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":411},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":51666,"byte_end":51671,"line_start":73,"line_end":73,"column_start":12,"column_end":17},"name":"clear","qualname":"<LinearMap<K, V, N>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears the map, removing all key-value pairs","sig":null,"attributes":[{"value":"/ Clears the map, removing all key-value pairs","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":51279,"byte_end":51327,"line_start":58,"line_end":58,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":51332,"byte_end":51335,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":51340,"byte_end":51369,"line_start":60,"line_end":60,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":51374,"byte_end":51377,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":51382,"byte_end":51396,"line_start":62,"line_end":62,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":51401,"byte_end":51404,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":51409,"byte_end":51416,"line_start":64,"line_end":64,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":51421,"byte_end":51449,"line_start":65,"line_end":65,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":51454,"byte_end":51482,"line_start":66,"line_end":66,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":51487,"byte_end":51490,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, U8> = LinearMap::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":51495,"byte_end":51551,"line_start":68,"line_end":68,"column_start":5,"column_end":61}},{"value":"/ map.insert(1, \"a\").unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":51556,"byte_end":51588,"line_start":69,"line_end":69,"column_start":5,"column_end":37}},{"value":"/ map.clear();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":51593,"byte_end":51609,"line_start":70,"line_end":70,"column_start":5,"column_end":21}},{"value":"/ assert!(map.is_empty());","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":51614,"byte_end":51642,"line_start":71,"line_end":71,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":51647,"byte_end":51654,"line_start":72,"line_end":72,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":52173,"byte_end":52185,"line_start":92,"line_end":92,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<LinearMap<K, V, N>>::contains_key","value":"fn (&self, key: &K) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the map contains a value for the specified key.","sig":null,"attributes":[{"value":"/ Returns true if the map contains a value for the specified key.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":51724,"byte_end":51791,"line_start":77,"line_end":77,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":51796,"byte_end":51799,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(N)** time","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":51804,"byte_end":51833,"line_start":79,"line_end":79,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":51838,"byte_end":51841,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":51846,"byte_end":51860,"line_start":81,"line_end":81,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":51865,"byte_end":51868,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":51873,"byte_end":51880,"line_start":83,"line_end":83,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":51885,"byte_end":51913,"line_start":84,"line_end":84,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":51918,"byte_end":51946,"line_start":85,"line_end":85,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":51951,"byte_end":51954,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, U8> = LinearMap::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":51959,"byte_end":52015,"line_start":87,"line_end":87,"column_start":5,"column_end":61}},{"value":"/ map.insert(1, \"a\").unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":52020,"byte_end":52052,"line_start":88,"line_end":88,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(map.contains_key(&1), true);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":52057,"byte_end":52100,"line_start":89,"line_end":89,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(map.contains_key(&2), false);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":52105,"byte_end":52149,"line_start":90,"line_end":90,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":52154,"byte_end":52161,"line_start":91,"line_end":91,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":413},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":52685,"byte_end":52688,"line_start":111,"line_end":111,"column_start":12,"column_end":15},"name":"get","qualname":"<LinearMap<K, V, N>>::get","value":"fn <Q> (&self, key: &Q) -> Option<&V>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value corresponding to the key","sig":null,"attributes":[{"value":"/ Returns a reference to the value corresponding to the key","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":52255,"byte_end":52316,"line_start":96,"line_end":96,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":52321,"byte_end":52324,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(N)** time","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":52329,"byte_end":52358,"line_start":98,"line_end":98,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":52363,"byte_end":52366,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":52371,"byte_end":52385,"line_start":100,"line_end":100,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":52390,"byte_end":52393,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":52398,"byte_end":52405,"line_start":102,"line_end":102,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":52410,"byte_end":52438,"line_start":103,"line_end":103,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":52443,"byte_end":52471,"line_start":104,"line_end":104,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":52476,"byte_end":52479,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, U8> = LinearMap::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":52484,"byte_end":52540,"line_start":106,"line_end":106,"column_start":5,"column_end":61}},{"value":"/ map.insert(1, \"a\").unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":52545,"byte_end":52577,"line_start":107,"line_end":107,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(map.get(&1), Some(&\"a\"));","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":52582,"byte_end":52622,"line_start":108,"line_end":108,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(map.get(&2), None);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":52627,"byte_end":52661,"line_start":109,"line_end":109,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":52666,"byte_end":52673,"line_start":110,"line_end":110,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":417},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":53354,"byte_end":53361,"line_start":138,"line_end":138,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<LinearMap<K, V, N>>::get_mut","value":"fn <Q> (&mut self, key: &Q) -> Option<&mut V>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the value corresponding to the key","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the value corresponding to the key","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":52891,"byte_end":52960,"line_start":121,"line_end":121,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":52965,"byte_end":52968,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(N)** time","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":52973,"byte_end":53002,"line_start":123,"line_end":123,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":53007,"byte_end":53010,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":53015,"byte_end":53029,"line_start":125,"line_end":125,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":53034,"byte_end":53037,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":53042,"byte_end":53049,"line_start":127,"line_end":127,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":53054,"byte_end":53082,"line_start":128,"line_end":128,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":53087,"byte_end":53115,"line_start":129,"line_end":129,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":53120,"byte_end":53123,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, U8> = LinearMap::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":53128,"byte_end":53184,"line_start":131,"line_end":131,"column_start":5,"column_end":61}},{"value":"/ map.insert(1, \"a\").unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":53189,"byte_end":53221,"line_start":132,"line_end":132,"column_start":5,"column_end":37}},{"value":"/ if let Some(x) = map.get_mut(&1) {","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":53226,"byte_end":53264,"line_start":133,"line_end":133,"column_start":5,"column_end":43}},{"value":"/     *x = \"b\";","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":53269,"byte_end":53286,"line_start":134,"line_end":134,"column_start":5,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":53291,"byte_end":53296,"line_start":135,"line_end":135,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(map[&1], \"b\");","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":53301,"byte_end":53330,"line_start":136,"line_end":136,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":53335,"byte_end":53342,"line_start":137,"line_end":137,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":421},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":53967,"byte_end":53970,"line_start":163,"line_end":163,"column_start":12,"column_end":15},"name":"len","qualname":"<LinearMap<K, V, N>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in this map","sig":null,"attributes":[{"value":"/ Returns the number of elements in this map","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":53576,"byte_end":53622,"line_start":148,"line_end":148,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":53627,"byte_end":53630,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":53635,"byte_end":53664,"line_start":150,"line_end":150,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":53669,"byte_end":53672,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":53677,"byte_end":53691,"line_start":152,"line_end":152,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":53696,"byte_end":53699,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":53704,"byte_end":53711,"line_start":154,"line_end":154,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":53716,"byte_end":53744,"line_start":155,"line_end":155,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":53749,"byte_end":53777,"line_start":156,"line_end":156,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":53782,"byte_end":53785,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ let mut a: LinearMap<_, _, U8> = LinearMap::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":53790,"byte_end":53844,"line_start":158,"line_end":158,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(a.len(), 0);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":53849,"byte_end":53876,"line_start":159,"line_end":159,"column_start":5,"column_end":32}},{"value":"/ a.insert(1, \"a\").unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":53881,"byte_end":53911,"line_start":160,"line_end":160,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(a.len(), 1);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":53916,"byte_end":53943,"line_start":161,"line_end":161,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":53948,"byte_end":53955,"line_start":162,"line_end":162,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":422},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":54742,"byte_end":54748,"line_start":189,"line_end":189,"column_start":12,"column_end":18},"name":"insert","qualname":"<LinearMap<K, V, N>>::insert","value":"fn (&mut self, key: K, mut value: V) -> Result<Option<V>, (K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a key-value pair into the map.","sig":null,"attributes":[{"value":"/ Inserts a key-value pair into the map.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":54026,"byte_end":54068,"line_start":167,"line_end":167,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":54073,"byte_end":54076,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ If the map did not have this key present, `None` is returned.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":54081,"byte_end":54146,"line_start":169,"line_end":169,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":54151,"byte_end":54154,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ If the map did have this key present, the value is updated, and the old value is returned.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":54159,"byte_end":54253,"line_start":171,"line_end":171,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":54258,"byte_end":54261,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(N)** time","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":54266,"byte_end":54295,"line_start":173,"line_end":173,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":54300,"byte_end":54303,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":54308,"byte_end":54322,"line_start":175,"line_end":175,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":54327,"byte_end":54330,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":54335,"byte_end":54342,"line_start":177,"line_end":177,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":54347,"byte_end":54375,"line_start":178,"line_end":178,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":54380,"byte_end":54408,"line_start":179,"line_end":179,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":54413,"byte_end":54416,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, U8> = LinearMap::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":54421,"byte_end":54477,"line_start":181,"line_end":181,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(map.insert(37, \"a\").unwrap(), None);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":54482,"byte_end":54533,"line_start":182,"line_end":182,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(map.is_empty(), false);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":54538,"byte_end":54576,"line_start":183,"line_end":183,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":54581,"byte_end":54584,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ map.insert(37, \"b\").unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":54589,"byte_end":54622,"line_start":185,"line_end":185,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(map.insert(37, \"c\").unwrap(), Some(\"b\"));","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":54627,"byte_end":54683,"line_start":186,"line_end":186,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(map[&37], \"c\");","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":54688,"byte_end":54718,"line_start":187,"line_end":187,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":54723,"byte_end":54730,"line_start":188,"line_end":188,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":424},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":55433,"byte_end":55441,"line_start":214,"line_end":214,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<LinearMap<K, V, N>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the map contains no elements","sig":null,"attributes":[{"value":"/ Returns true if the map contains no elements","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":55041,"byte_end":55089,"line_start":199,"line_end":199,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":55094,"byte_end":55097,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":55102,"byte_end":55131,"line_start":201,"line_end":201,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":55136,"byte_end":55139,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":55144,"byte_end":55158,"line_start":203,"line_end":203,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":55163,"byte_end":55166,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":55171,"byte_end":55178,"line_start":205,"line_end":205,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":55183,"byte_end":55211,"line_start":206,"line_end":206,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":55216,"byte_end":55244,"line_start":207,"line_end":207,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":55249,"byte_end":55252,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ let mut a: LinearMap<_, _, U8> = LinearMap::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":55257,"byte_end":55311,"line_start":209,"line_end":209,"column_start":5,"column_end":59}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":55316,"byte_end":55342,"line_start":210,"line_end":210,"column_start":5,"column_end":31}},{"value":"/ a.insert(1, \"a\").unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":55347,"byte_end":55377,"line_start":211,"line_end":211,"column_start":5,"column_end":35}},{"value":"/ assert!(!a.is_empty());","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":55382,"byte_end":55409,"line_start":212,"line_end":212,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":55414,"byte_end":55421,"line_start":213,"line_end":213,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":425},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":55983,"byte_end":55987,"line_start":235,"line_end":235,"column_start":12,"column_end":16},"name":"iter","qualname":"<LinearMap<K, V, N>>::iter","value":"fn (&self) -> Iter<K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all key-value pairs in arbitrary order.","sig":null,"attributes":[{"value":"/ An iterator visiting all key-value pairs in arbitrary order.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":55494,"byte_end":55558,"line_start":218,"line_end":218,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":55563,"byte_end":55566,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":55571,"byte_end":55585,"line_start":220,"line_end":220,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":55590,"byte_end":55593,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":55598,"byte_end":55605,"line_start":222,"line_end":222,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":55610,"byte_end":55638,"line_start":223,"line_end":223,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":55643,"byte_end":55671,"line_start":224,"line_end":224,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":55676,"byte_end":55679,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, U8> = LinearMap::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":55684,"byte_end":55740,"line_start":226,"line_end":226,"column_start":5,"column_end":61}},{"value":"/ map.insert(\"a\", 1).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":55745,"byte_end":55777,"line_start":227,"line_end":227,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"b\", 2).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":55782,"byte_end":55814,"line_start":228,"line_end":228,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"c\", 3).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":55819,"byte_end":55851,"line_start":229,"line_end":229,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":55856,"byte_end":55859,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ for (key, val) in map.iter() {","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":55864,"byte_end":55898,"line_start":231,"line_end":231,"column_start":5,"column_end":39}},{"value":"/     println!(\"key: {} val: {}\", key, val);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":55903,"byte_end":55949,"line_start":232,"line_end":232,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":55954,"byte_end":55959,"line_start":233,"line_end":233,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":55964,"byte_end":55971,"line_start":234,"line_end":234,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":426},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":56724,"byte_end":56732,"line_start":264,"line_end":264,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<LinearMap<K, V, N>>::iter_mut","value":"fn (&mut self) -> IterMut<K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all key-value pairs in arbitrary order, with mutable references to the\n values","sig":null,"attributes":[{"value":"/ An iterator visiting all key-value pairs in arbitrary order, with mutable references to the","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":56085,"byte_end":56180,"line_start":241,"line_end":241,"column_start":5,"column_end":100}},{"value":"/ values","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":56185,"byte_end":56195,"line_start":242,"line_end":242,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":56200,"byte_end":56203,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":56208,"byte_end":56222,"line_start":244,"line_end":244,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":56227,"byte_end":56230,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":56235,"byte_end":56242,"line_start":246,"line_end":246,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":56247,"byte_end":56275,"line_start":247,"line_end":247,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":56280,"byte_end":56308,"line_start":248,"line_end":248,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":56313,"byte_end":56316,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, U8> = LinearMap::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":56321,"byte_end":56377,"line_start":250,"line_end":250,"column_start":5,"column_end":61}},{"value":"/ map.insert(\"a\", 1).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":56382,"byte_end":56414,"line_start":251,"line_end":251,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"b\", 2).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":56419,"byte_end":56451,"line_start":252,"line_end":252,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"c\", 3).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":56456,"byte_end":56488,"line_start":253,"line_end":253,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":56493,"byte_end":56496,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ // Update all values","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":56501,"byte_end":56525,"line_start":255,"line_end":255,"column_start":5,"column_end":29}},{"value":"/ for (_, val) in map.iter_mut() {","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":56530,"byte_end":56566,"line_start":256,"line_end":256,"column_start":5,"column_end":41}},{"value":"/     *val = 2;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":56571,"byte_end":56588,"line_start":257,"line_end":257,"column_start":5,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":56593,"byte_end":56598,"line_start":258,"line_end":258,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":56603,"byte_end":56606,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ for (key, val) in &map {","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":56611,"byte_end":56639,"line_start":260,"line_end":260,"column_start":5,"column_end":33}},{"value":"/     println!(\"key: {} val: {}\", key, val);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":56644,"byte_end":56690,"line_start":261,"line_end":261,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":56695,"byte_end":56700,"line_start":262,"line_end":262,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":56705,"byte_end":56712,"line_start":263,"line_end":263,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":427},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":57296,"byte_end":57300,"line_start":287,"line_end":287,"column_start":12,"column_end":16},"name":"keys","qualname":"<LinearMap<K, V, N>>::keys","value":"fn (&self) -> impl Iterator<Item = &K>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all keys in arbitrary order","sig":null,"attributes":[{"value":"/ An iterator visiting all keys in arbitrary order","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":56844,"byte_end":56896,"line_start":270,"line_end":270,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":56901,"byte_end":56904,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":56909,"byte_end":56923,"line_start":272,"line_end":272,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":56928,"byte_end":56931,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":56936,"byte_end":56943,"line_start":274,"line_end":274,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":56948,"byte_end":56976,"line_start":275,"line_end":275,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":56981,"byte_end":57009,"line_start":276,"line_end":276,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":57014,"byte_end":57017,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, U8> = LinearMap::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":57022,"byte_end":57078,"line_start":278,"line_end":278,"column_start":5,"column_end":61}},{"value":"/ map.insert(\"a\", 1).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":57083,"byte_end":57115,"line_start":279,"line_end":279,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"b\", 2).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":57120,"byte_end":57152,"line_start":280,"line_end":280,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"c\", 3).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":57157,"byte_end":57189,"line_start":281,"line_end":281,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":57194,"byte_end":57197,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ for key in map.keys() {","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":57202,"byte_end":57229,"line_start":283,"line_end":283,"column_start":5,"column_end":32}},{"value":"/     println!(\"{}\", key);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":57234,"byte_end":57262,"line_start":284,"line_end":284,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":57267,"byte_end":57272,"line_start":285,"line_end":285,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":57277,"byte_end":57284,"line_start":286,"line_end":286,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":430},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":57866,"byte_end":57872,"line_start":307,"line_end":307,"column_start":12,"column_end":18},"name":"remove","qualname":"<LinearMap<K, V, N>>::remove","value":"fn <Q> (&mut self, key: &Q) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Removes a key from the map, returning the value at the key if the key was previously in the\n map","sig":null,"attributes":[{"value":"/ Removes a key from the map, returning the value at the key if the key was previously in the","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":57385,"byte_end":57480,"line_start":291,"line_end":291,"column_start":5,"column_end":100}},{"value":"/ map","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":57485,"byte_end":57492,"line_start":292,"line_end":292,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":57497,"byte_end":57500,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(N)** time","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":57505,"byte_end":57534,"line_start":294,"line_end":294,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":57539,"byte_end":57542,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":57547,"byte_end":57561,"line_start":296,"line_end":296,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":57566,"byte_end":57569,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":57574,"byte_end":57581,"line_start":298,"line_end":298,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":57586,"byte_end":57614,"line_start":299,"line_end":299,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":57619,"byte_end":57647,"line_start":300,"line_end":300,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":57652,"byte_end":57655,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, U8> = LinearMap::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":57660,"byte_end":57716,"line_start":302,"line_end":302,"column_start":5,"column_end":61}},{"value":"/ map.insert(1, \"a\").unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":57721,"byte_end":57753,"line_start":303,"line_end":303,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(map.remove(&1), Some(\"a\"));","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":57758,"byte_end":57800,"line_start":304,"line_end":304,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(map.remove(&1), None);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":57805,"byte_end":57842,"line_start":305,"line_end":305,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":57847,"byte_end":57854,"line_start":306,"line_end":306,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":435},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":58629,"byte_end":58635,"line_start":337,"line_end":337,"column_start":12,"column_end":18},"name":"values","qualname":"<LinearMap<K, V, N>>::values","value":"fn (&self) -> impl Iterator<Item = &V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all values in arbitrary order","sig":null,"attributes":[{"value":"/ An iterator visiting all values in arbitrary order","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":58173,"byte_end":58227,"line_start":320,"line_end":320,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":58232,"byte_end":58235,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":58240,"byte_end":58254,"line_start":322,"line_end":322,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":58259,"byte_end":58262,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":58267,"byte_end":58274,"line_start":324,"line_end":324,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":58279,"byte_end":58307,"line_start":325,"line_end":325,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":58312,"byte_end":58340,"line_start":326,"line_end":326,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":58345,"byte_end":58348,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, U8> = LinearMap::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":58353,"byte_end":58409,"line_start":328,"line_end":328,"column_start":5,"column_end":61}},{"value":"/ map.insert(\"a\", 1).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":58414,"byte_end":58446,"line_start":329,"line_end":329,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"b\", 2).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":58451,"byte_end":58483,"line_start":330,"line_end":330,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"c\", 3).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":58488,"byte_end":58520,"line_start":331,"line_end":331,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":58525,"byte_end":58528,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ for val in map.values() {","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":58533,"byte_end":58562,"line_start":333,"line_end":333,"column_start":5,"column_end":34}},{"value":"/     println!(\"{}\", val);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":58567,"byte_end":58595,"line_start":334,"line_end":334,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":58600,"byte_end":58605,"line_start":335,"line_end":335,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":58610,"byte_end":58617,"line_start":336,"line_end":336,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":438},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":59264,"byte_end":59274,"line_start":362,"line_end":362,"column_start":12,"column_end":22},"name":"values_mut","qualname":"<LinearMap<K, V, N>>::values_mut","value":"fn (&mut self) -> impl Iterator<Item = &mut V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all values mutably in arbitrary order","sig":null,"attributes":[{"value":"/ An iterator visiting all values mutably in arbitrary order","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":58720,"byte_end":58782,"line_start":341,"line_end":341,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":58787,"byte_end":58790,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":58795,"byte_end":58809,"line_start":343,"line_end":343,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":58814,"byte_end":58817,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":58822,"byte_end":58829,"line_start":345,"line_end":345,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":58834,"byte_end":58862,"line_start":346,"line_end":346,"column_start":5,"column_end":33}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":58867,"byte_end":58895,"line_start":347,"line_end":347,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":58900,"byte_end":58903,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, U8> = LinearMap::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":58908,"byte_end":58964,"line_start":349,"line_end":349,"column_start":5,"column_end":61}},{"value":"/ map.insert(\"a\", 1).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":58969,"byte_end":59001,"line_start":350,"line_end":350,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"b\", 2).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":59006,"byte_end":59038,"line_start":351,"line_end":351,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"c\", 3).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":59043,"byte_end":59075,"line_start":352,"line_end":352,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":59080,"byte_end":59083,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ for val in map.values_mut() {","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":59088,"byte_end":59121,"line_start":354,"line_end":354,"column_start":5,"column_end":38}},{"value":"/     *val += 10;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":59126,"byte_end":59145,"line_start":355,"line_end":355,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":59150,"byte_end":59155,"line_start":356,"line_end":356,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":59160,"byte_end":59163,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ for val in map.values() {","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":59168,"byte_end":59197,"line_start":358,"line_end":358,"column_start":5,"column_end":34}},{"value":"/     println!(\"{}\", val);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":59202,"byte_end":59230,"line_start":359,"line_end":359,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":59235,"byte_end":59240,"line_start":360,"line_end":360,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":59245,"byte_end":59252,"line_start":361,"line_end":361,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":464},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":60173,"byte_end":60177,"line_start":406,"line_end":406,"column_start":12,"column_end":16},"name":"Iter","qualname":"::linear_map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":468}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":476},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":60484,"byte_end":60491,"line_start":426,"line_end":426,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::linear_map::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":480}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":496},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":61277,"byte_end":61283,"line_start":9,"line_end":9,"column_start":12,"column_end":18},"name":"String","qualname":"::string::String","value":"String {  }","parent":null,"children":[{"krate":0,"index":498}],"decl_id":null,"docs":" A fixed capacity [`String`](https://doc.rust-lang.org/std/string/struct.String.html)\n","sig":null,"attributes":[{"value":"/ A fixed capacity [`String`](https://doc.rust-lang.org/std/string/struct.String.html)","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":61177,"byte_end":61265,"line_start":8,"line_end":8,"column_start":1,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":927},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":61768,"byte_end":61771,"line_start":35,"line_end":35,"column_start":22,"column_end":25},"name":"new","qualname":"<String<N>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new, empty `String` with a fixed capacity of `N`","sig":null,"attributes":[{"value":"cfg(not(feature = \"const-fn\"))","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/const_fn.rs","byte_start":4992,"byte_end":5025,"line_start":23,"line_end":23,"column_start":9,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":63132,"byte_end":63141,"line_start":82,"line_end":82,"column_start":12,"column_end":21},"name":"from_utf8","qualname":"<String<N>>::from_utf8","value":"fn (vec: Vec<u8, N>) -> Result<(String<N>), Utf8Error>","parent":null,"children":[],"decl_id":null,"docs":" Converts a vector of bytes into a `String`.","sig":null,"attributes":[{"value":"/ Converts a vector of bytes into a `String`.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":61845,"byte_end":61892,"line_start":40,"line_end":40,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":61897,"byte_end":61900,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ A string slice ([`&str`]) is made of bytes ([`u8`]), and a vector of bytes","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":61905,"byte_end":61983,"line_start":42,"line_end":42,"column_start":5,"column_end":83}},{"value":"/ ([`Vec<u8>`]) is made of bytes, so this function converts between the","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":61988,"byte_end":62061,"line_start":43,"line_end":43,"column_start":5,"column_end":78}},{"value":"/ two. Not all byte slices are valid `String`s, however: `String`","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":62066,"byte_end":62133,"line_start":44,"line_end":44,"column_start":5,"column_end":72}},{"value":"/ requires that it is valid UTF-8. `from_utf8()` checks to ensure that","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":62138,"byte_end":62210,"line_start":45,"line_end":45,"column_start":5,"column_end":77}},{"value":"/ the bytes are valid UTF-8, and then does the conversion.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":62215,"byte_end":62275,"line_start":46,"line_end":46,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":62280,"byte_end":62283,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ See std::String for further information.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":62288,"byte_end":62332,"line_start":48,"line_end":48,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":62337,"byte_end":62340,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":62345,"byte_end":62359,"line_start":50,"line_end":50,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":62364,"byte_end":62367,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":62372,"byte_end":62388,"line_start":52,"line_end":52,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":62393,"byte_end":62396,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":62401,"byte_end":62408,"line_start":54,"line_end":54,"column_start":5,"column_end":12}},{"value":"/ use heapless::{String, Vec};","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":62413,"byte_end":62445,"line_start":55,"line_end":55,"column_start":5,"column_end":37}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":62450,"byte_end":62478,"line_start":56,"line_end":56,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":62483,"byte_end":62486,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ let mut v: Vec<u8, U8> = Vec::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":62491,"byte_end":62531,"line_start":58,"line_end":58,"column_start":5,"column_end":45}},{"value":"/ v.push('a' as u8).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":62536,"byte_end":62567,"line_start":59,"line_end":59,"column_start":5,"column_end":36}},{"value":"/ v.push('b' as u8).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":62572,"byte_end":62603,"line_start":60,"line_end":60,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":62608,"byte_end":62611,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ let s = String::from_utf8(v).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":62616,"byte_end":62658,"line_start":62,"line_end":62,"column_start":5,"column_end":47}},{"value":"/ assert!(s.len() == 2);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":62663,"byte_end":62689,"line_start":63,"line_end":63,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":62694,"byte_end":62701,"line_start":64,"line_end":64,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":62706,"byte_end":62709,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ Incorrect bytes:","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":62714,"byte_end":62734,"line_start":66,"line_end":66,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":62739,"byte_end":62742,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":62747,"byte_end":62754,"line_start":68,"line_end":68,"column_start":5,"column_end":12}},{"value":"/ use heapless::{String, Vec};","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":62759,"byte_end":62791,"line_start":69,"line_end":69,"column_start":5,"column_end":37}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":62796,"byte_end":62824,"line_start":70,"line_end":70,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":62829,"byte_end":62832,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ // some invalid bytes, in a vector","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":62837,"byte_end":62875,"line_start":72,"line_end":72,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":62880,"byte_end":62883,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ let mut v: Vec<u8, U8> = Vec::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":62888,"byte_end":62928,"line_start":74,"line_end":74,"column_start":5,"column_end":45}},{"value":"/ v.push(0).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":62933,"byte_end":62956,"line_start":75,"line_end":75,"column_start":5,"column_end":28}},{"value":"/ v.push(159).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":62961,"byte_end":62986,"line_start":76,"line_end":76,"column_start":5,"column_end":30}},{"value":"/ v.push(146).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":62991,"byte_end":63016,"line_start":77,"line_end":77,"column_start":5,"column_end":30}},{"value":"/ v.push(150).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":63021,"byte_end":63046,"line_start":78,"line_end":78,"column_start":5,"column_end":30}},{"value":"/ assert!(String::from_utf8(v).is_err());","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":63051,"byte_end":63094,"line_start":79,"line_end":79,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":63099,"byte_end":63106,"line_start":80,"line_end":80,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":63111,"byte_end":63120,"line_start":81,"line_end":81,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":63506,"byte_end":63525,"line_start":94,"line_end":94,"column_start":19,"column_end":38},"name":"from_utf8_unchecked","qualname":"<String<N>>::from_utf8_unchecked","value":"fn (vec: Vec<u8, N>) -> String<N>","parent":null,"children":[],"decl_id":null,"docs":" Converts a vector of bytes to a `String` without checking that the\n string contains valid UTF-8.","sig":null,"attributes":[{"value":"/ Converts a vector of bytes to a `String` without checking that the","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":63297,"byte_end":63367,"line_start":89,"line_end":89,"column_start":5,"column_end":75}},{"value":"/ string contains valid UTF-8.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":63372,"byte_end":63404,"line_start":90,"line_end":90,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":63409,"byte_end":63412,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ See the safe version, `from_utf8`, for more details.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":63417,"byte_end":63473,"line_start":92,"line_end":92,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":63478,"byte_end":63487,"line_start":93,"line_end":93,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":64081,"byte_end":64091,"line_start":117,"line_end":117,"column_start":12,"column_end":22},"name":"into_bytes","qualname":"<String<N>>::into_bytes","value":"fn (self) -> Vec<u8, N>","parent":null,"children":[],"decl_id":null,"docs":" Converts a `String` into a byte vector.","sig":null,"attributes":[{"value":"/ Converts a `String` into a byte vector.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":63597,"byte_end":63640,"line_start":98,"line_end":98,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":63645,"byte_end":63648,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ This consumes the `String`, so we do not need to copy its contents.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":63653,"byte_end":63724,"line_start":100,"line_end":100,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":63729,"byte_end":63732,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":63737,"byte_end":63751,"line_start":102,"line_end":102,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":63756,"byte_end":63759,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":63764,"byte_end":63780,"line_start":104,"line_end":104,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":63785,"byte_end":63788,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":63793,"byte_end":63800,"line_start":106,"line_end":106,"column_start":5,"column_end":12}},{"value":"/ use heapless::String;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":63805,"byte_end":63830,"line_start":107,"line_end":107,"column_start":5,"column_end":30}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":63835,"byte_end":63863,"line_start":108,"line_end":108,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":63868,"byte_end":63871,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ let s: String<U4> = String::from(\"ab\");","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":63876,"byte_end":63919,"line_start":110,"line_end":110,"column_start":5,"column_end":48}},{"value":"/ let b = s.into_bytes();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":63924,"byte_end":63951,"line_start":111,"line_end":111,"column_start":5,"column_end":32}},{"value":"/ assert!(b.len() == 2);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":63956,"byte_end":63982,"line_start":112,"line_end":112,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":63987,"byte_end":63990,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&['a' as u8, 'b' as u8], &b[..]);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":63995,"byte_end":64043,"line_start":114,"line_end":114,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":64048,"byte_end":64055,"line_start":115,"line_end":115,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":64060,"byte_end":64069,"line_start":116,"line_end":116,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":64610,"byte_end":64616,"line_start":138,"line_end":138,"column_start":12,"column_end":18},"name":"as_str","qualname":"<String<N>>::as_str","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Extracts a string slice containing the entire string.","sig":null,"attributes":[{"value":"/ Extracts a string slice containing the entire string.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":64142,"byte_end":64199,"line_start":121,"line_end":121,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":64204,"byte_end":64207,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":64212,"byte_end":64226,"line_start":123,"line_end":123,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":64231,"byte_end":64234,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":64239,"byte_end":64255,"line_start":125,"line_end":125,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":64260,"byte_end":64263,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":64268,"byte_end":64275,"line_start":127,"line_end":127,"column_start":5,"column_end":12}},{"value":"/ use heapless::String;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":64280,"byte_end":64305,"line_start":128,"line_end":128,"column_start":5,"column_end":30}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":64310,"byte_end":64338,"line_start":129,"line_end":129,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":64343,"byte_end":64346,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ let mut s: String<U4> = String::from(\"ab\");","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":64351,"byte_end":64398,"line_start":131,"line_end":131,"column_start":5,"column_end":52}},{"value":"/ assert!(s.as_str() == \"ab\");","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":64403,"byte_end":64435,"line_start":132,"line_end":132,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":64440,"byte_end":64443,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ let _s = s.as_str();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":64448,"byte_end":64472,"line_start":134,"line_end":134,"column_start":5,"column_end":29}},{"value":"/ // s.push('c'); // <- cannot borrow `s` as mutable because it is also borrowed as immutable","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":64477,"byte_end":64572,"line_start":135,"line_end":135,"column_start":5,"column_end":100}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":64577,"byte_end":64584,"line_start":136,"line_end":136,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":64589,"byte_end":64598,"line_start":137,"line_end":137,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":65056,"byte_end":65066,"line_start":157,"line_end":157,"column_start":12,"column_end":22},"name":"as_mut_str","qualname":"<String<N>>::as_mut_str","value":"fn (&mut self) -> &mut str","parent":null,"children":[],"decl_id":null,"docs":" Converts a `String` into a mutable string slice.","sig":null,"attributes":[{"value":"/ Converts a `String` into a mutable string slice.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":64701,"byte_end":64753,"line_start":142,"line_end":142,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":64758,"byte_end":64761,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":64766,"byte_end":64780,"line_start":144,"line_end":144,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":64785,"byte_end":64788,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":64793,"byte_end":64809,"line_start":146,"line_end":146,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":64814,"byte_end":64817,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":64822,"byte_end":64829,"line_start":148,"line_end":148,"column_start":5,"column_end":12}},{"value":"/ use heapless::String;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":64834,"byte_end":64859,"line_start":149,"line_end":149,"column_start":5,"column_end":30}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":64864,"byte_end":64892,"line_start":150,"line_end":150,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":64897,"byte_end":64900,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ let mut s: String<U4> = String::from(\"ab\");","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":64905,"byte_end":64952,"line_start":152,"line_end":152,"column_start":5,"column_end":52}},{"value":"/ let s = s.as_mut_str();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":64957,"byte_end":64984,"line_start":153,"line_end":153,"column_start":5,"column_end":32}},{"value":"/ s.make_ascii_uppercase();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":64989,"byte_end":65018,"line_start":154,"line_end":154,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":65023,"byte_end":65030,"line_start":155,"line_end":155,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":65035,"byte_end":65044,"line_start":156,"line_end":156,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":65617,"byte_end":65625,"line_start":180,"line_end":180,"column_start":12,"column_end":20},"name":"push_str","qualname":"<String<N>>::push_str","value":"fn (&mut self, string: &str) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Appends a given string slice onto the end of this `String`.","sig":null,"attributes":[{"value":"/ Appends a given string slice onto the end of this `String`.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":65167,"byte_end":65230,"line_start":161,"line_end":161,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":65235,"byte_end":65238,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":65243,"byte_end":65257,"line_start":163,"line_end":163,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":65262,"byte_end":65265,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":65270,"byte_end":65286,"line_start":165,"line_end":165,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":65291,"byte_end":65294,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":65299,"byte_end":65306,"line_start":167,"line_end":167,"column_start":5,"column_end":12}},{"value":"/ use heapless::String;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":65311,"byte_end":65336,"line_start":168,"line_end":168,"column_start":5,"column_end":30}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":65341,"byte_end":65369,"line_start":169,"line_end":169,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":65374,"byte_end":65377,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ let mut s: String<U8> = String::from(\"foo\");","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":65382,"byte_end":65430,"line_start":171,"line_end":171,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":65435,"byte_end":65438,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ assert!(s.push_str(\"bar\").is_ok());","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":65443,"byte_end":65482,"line_start":173,"line_end":173,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":65487,"byte_end":65490,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"foobar\", s);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":65495,"byte_end":65523,"line_start":175,"line_end":175,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":65528,"byte_end":65531,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ assert!(s.push_str(\"tender\").is_err());","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":65536,"byte_end":65579,"line_start":177,"line_end":177,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":65584,"byte_end":65591,"line_start":178,"line_end":178,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":65596,"byte_end":65605,"line_start":179,"line_end":179,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":507},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":66066,"byte_end":66074,"line_start":198,"line_end":198,"column_start":12,"column_end":20},"name":"capacity","qualname":"<String<N>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum number of elements the String can hold","sig":null,"attributes":[{"value":"/ Returns the maximum number of elements the String can hold","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":65736,"byte_end":65798,"line_start":184,"line_end":184,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":65803,"byte_end":65806,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":65811,"byte_end":65825,"line_start":186,"line_end":186,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":65830,"byte_end":65833,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":65838,"byte_end":65854,"line_start":188,"line_end":188,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":65859,"byte_end":65862,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":65867,"byte_end":65874,"line_start":190,"line_end":190,"column_start":5,"column_end":12}},{"value":"/ use heapless::String;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":65879,"byte_end":65904,"line_start":191,"line_end":191,"column_start":5,"column_end":30}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":65909,"byte_end":65937,"line_start":192,"line_end":192,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":65942,"byte_end":65945,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ let mut s: String<U4> = String::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":65950,"byte_end":65992,"line_start":194,"line_end":194,"column_start":5,"column_end":47}},{"value":"/ assert!(s.capacity() == 4);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":65997,"byte_end":66028,"line_start":195,"line_end":195,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":66033,"byte_end":66040,"line_start":196,"line_end":196,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":66045,"byte_end":66054,"line_start":197,"line_end":197,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":508},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":66673,"byte_end":66677,"line_start":225,"line_end":225,"column_start":12,"column_end":16},"name":"push","qualname":"<String<N>>::push","value":"fn (&mut self, c: char) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Appends the given [`char`] to the end of this `String`.","sig":null,"attributes":[{"value":"/ Appends the given [`char`] to the end of this `String`.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":66132,"byte_end":66191,"line_start":202,"line_end":202,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":66196,"byte_end":66199,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ [`char`]: ../../std/primitive.char.html","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":66204,"byte_end":66247,"line_start":204,"line_end":204,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":66252,"byte_end":66255,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":66260,"byte_end":66274,"line_start":206,"line_end":206,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":66279,"byte_end":66282,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":66287,"byte_end":66303,"line_start":208,"line_end":208,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":66308,"byte_end":66311,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":66316,"byte_end":66323,"line_start":210,"line_end":210,"column_start":5,"column_end":12}},{"value":"/ use heapless::String;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":66328,"byte_end":66353,"line_start":211,"line_end":211,"column_start":5,"column_end":30}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":66358,"byte_end":66386,"line_start":212,"line_end":212,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":66391,"byte_end":66394,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ let mut s: String<U8> = String::from(\"abc\");","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":66399,"byte_end":66447,"line_start":214,"line_end":214,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":66452,"byte_end":66455,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ s.push('1').unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":66460,"byte_end":66485,"line_start":216,"line_end":216,"column_start":5,"column_end":30}},{"value":"/ s.push('2').unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":66490,"byte_end":66515,"line_start":217,"line_end":217,"column_start":5,"column_end":30}},{"value":"/ s.push('3').unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":66520,"byte_end":66545,"line_start":218,"line_end":218,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":66550,"byte_end":66553,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ assert!(\"abc123\" == s.as_str());","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":66558,"byte_end":66594,"line_start":220,"line_end":220,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":66599,"byte_end":66602,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"abc123\", s);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":66607,"byte_end":66635,"line_start":222,"line_end":222,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":66640,"byte_end":66647,"line_start":223,"line_end":223,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":66652,"byte_end":66661,"line_start":224,"line_end":224,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":511},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":67383,"byte_end":67391,"line_start":251,"line_end":251,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<String<N>>::as_bytes","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns a byte slice of this `String`'s contents.","sig":null,"attributes":[{"value":"/ Returns a byte slice of this `String`'s contents.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":66926,"byte_end":66979,"line_start":233,"line_end":233,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":66984,"byte_end":66987,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ The inverse of this method is [`from_utf8`].","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":66992,"byte_end":67040,"line_start":235,"line_end":235,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":67045,"byte_end":67048,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ [`from_utf8`]: #method.from_utf8","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":67053,"byte_end":67089,"line_start":237,"line_end":237,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":67094,"byte_end":67097,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":67102,"byte_end":67116,"line_start":239,"line_end":239,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":67121,"byte_end":67124,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":67129,"byte_end":67145,"line_start":241,"line_end":241,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":67150,"byte_end":67153,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":67158,"byte_end":67165,"line_start":243,"line_end":243,"column_start":5,"column_end":12}},{"value":"/ use heapless::String;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":67170,"byte_end":67195,"line_start":244,"line_end":244,"column_start":5,"column_end":30}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":67200,"byte_end":67228,"line_start":245,"line_end":245,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":67233,"byte_end":67236,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ let s: String<U8> = String::from(\"hello\");","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":67241,"byte_end":67287,"line_start":247,"line_end":247,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":67292,"byte_end":67295,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&[104, 101, 108, 108, 111], s.as_bytes());","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":67300,"byte_end":67357,"line_start":249,"line_end":249,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":67362,"byte_end":67371,"line_start":250,"line_end":250,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":512},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":68154,"byte_end":68162,"line_start":284,"line_end":284,"column_start":12,"column_end":20},"name":"truncate","qualname":"<String<N>>::truncate","value":"fn (&mut self, new_len: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shortens this `String` to the specified length.","sig":null,"attributes":[{"value":"/ Shortens this `String` to the specified length.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":67439,"byte_end":67490,"line_start":255,"line_end":255,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":67495,"byte_end":67498,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ If `new_len` is greater than the string's current length, this has no","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":67503,"byte_end":67576,"line_start":257,"line_end":257,"column_start":5,"column_end":78}},{"value":"/ effect.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":67581,"byte_end":67592,"line_start":258,"line_end":258,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":67597,"byte_end":67600,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ Note that this method has no effect on the allocated capacity","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":67605,"byte_end":67670,"line_start":260,"line_end":260,"column_start":5,"column_end":70}},{"value":"/ of the string","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":67675,"byte_end":67692,"line_start":261,"line_end":261,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":67697,"byte_end":67700,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":67705,"byte_end":67717,"line_start":263,"line_end":263,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":67722,"byte_end":67725,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ Panics if `new_len` does not lie on a [`char`] boundary.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":67730,"byte_end":67790,"line_start":265,"line_end":265,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":67795,"byte_end":67798,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ [`char`]: ../../std/primitive.char.html","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":67803,"byte_end":67846,"line_start":267,"line_end":267,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":67851,"byte_end":67854,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":67859,"byte_end":67873,"line_start":269,"line_end":269,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":67878,"byte_end":67881,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":67886,"byte_end":67902,"line_start":271,"line_end":271,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":67907,"byte_end":67910,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":67915,"byte_end":67922,"line_start":273,"line_end":273,"column_start":5,"column_end":12}},{"value":"/ use heapless::String;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":67927,"byte_end":67952,"line_start":274,"line_end":274,"column_start":5,"column_end":30}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":67957,"byte_end":67985,"line_start":275,"line_end":275,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":67990,"byte_end":67993,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ let mut s: String<U8> = String::from(\"hello\");","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":67998,"byte_end":68048,"line_start":277,"line_end":277,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":68053,"byte_end":68056,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ s.truncate(2);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":68061,"byte_end":68079,"line_start":279,"line_end":279,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":68084,"byte_end":68087,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"he\", s);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":68092,"byte_end":68116,"line_start":281,"line_end":281,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":68121,"byte_end":68128,"line_start":282,"line_end":282,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":68133,"byte_end":68142,"line_start":283,"line_end":283,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":513},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":68937,"byte_end":68940,"line_start":313,"line_end":313,"column_start":12,"column_end":15},"name":"pop","qualname":"<String<N>>::pop","value":"fn (&mut self) -> Option<char>","parent":null,"children":[],"decl_id":null,"docs":" Removes the last character from the string buffer and returns it.","sig":null,"attributes":[{"value":"/ Removes the last character from the string buffer and returns it.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":68340,"byte_end":68409,"line_start":291,"line_end":291,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":68414,"byte_end":68417,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ Returns [`None`] if this `String` is empty.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":68422,"byte_end":68469,"line_start":293,"line_end":293,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":68474,"byte_end":68477,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ [`None`]: ../../std/option/enum.Option.html#variant.None","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":68482,"byte_end":68542,"line_start":295,"line_end":295,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":68547,"byte_end":68550,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":68555,"byte_end":68569,"line_start":297,"line_end":297,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":68574,"byte_end":68577,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":68582,"byte_end":68598,"line_start":299,"line_end":299,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":68603,"byte_end":68606,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":68611,"byte_end":68618,"line_start":301,"line_end":301,"column_start":5,"column_end":12}},{"value":"/ use heapless::String;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":68623,"byte_end":68648,"line_start":302,"line_end":302,"column_start":5,"column_end":30}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":68653,"byte_end":68681,"line_start":303,"line_end":303,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":68686,"byte_end":68689,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ let mut s: String<U8> = String::from(\"foo\");","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":68694,"byte_end":68742,"line_start":305,"line_end":305,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":68747,"byte_end":68750,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(s.pop(), Some('o'));","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":68755,"byte_end":68790,"line_start":307,"line_end":307,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(s.pop(), Some('o'));","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":68795,"byte_end":68830,"line_start":308,"line_end":308,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(s.pop(), Some('f'));","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":68835,"byte_end":68870,"line_start":309,"line_end":309,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":68875,"byte_end":68878,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(s.pop(), None);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":68883,"byte_end":68913,"line_start":311,"line_end":311,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":68918,"byte_end":68925,"line_start":312,"line_end":312,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":69596,"byte_end":69604,"line_start":344,"line_end":344,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<String<N>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"\n Returns `true` if this `String` has a length of zero.","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":69164,"byte_end":69167,"line_start":324,"line_end":324,"column_start":5,"column_end":8}},{"value":"/ Returns `true` if this `String` has a length of zero.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":69172,"byte_end":69229,"line_start":325,"line_end":325,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":69234,"byte_end":69237,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ Returns `false` otherwise.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":69242,"byte_end":69272,"line_start":327,"line_end":327,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":69277,"byte_end":69280,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":69285,"byte_end":69299,"line_start":329,"line_end":329,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":69304,"byte_end":69307,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":69312,"byte_end":69328,"line_start":331,"line_end":331,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":69333,"byte_end":69336,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":69341,"byte_end":69348,"line_start":333,"line_end":333,"column_start":5,"column_end":12}},{"value":"/ use heapless::String;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":69353,"byte_end":69378,"line_start":334,"line_end":334,"column_start":5,"column_end":30}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":69383,"byte_end":69411,"line_start":335,"line_end":335,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":69416,"byte_end":69419,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ let mut v: String<U8> = String::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":69424,"byte_end":69466,"line_start":337,"line_end":337,"column_start":5,"column_end":47}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":69471,"byte_end":69497,"line_start":338,"line_end":338,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":69502,"byte_end":69505,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ v.push('a');","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":69510,"byte_end":69526,"line_start":340,"line_end":340,"column_start":5,"column_end":21}},{"value":"/ assert!(!v.is_empty());","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":69531,"byte_end":69558,"line_start":341,"line_end":341,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":69563,"byte_end":69570,"line_start":342,"line_end":342,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":69575,"byte_end":69584,"line_start":343,"line_end":343,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":515},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":70195,"byte_end":70200,"line_start":370,"line_end":370,"column_start":12,"column_end":17},"name":"clear","qualname":"<String<N>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Truncates this `String`, removing all contents.","sig":null,"attributes":[{"value":"/ Truncates this `String`, removing all contents.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":69657,"byte_end":69708,"line_start":348,"line_end":348,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":69713,"byte_end":69716,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ While this means the `String` will have a length of zero, it does not","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":69721,"byte_end":69794,"line_start":350,"line_end":350,"column_start":5,"column_end":78}},{"value":"/ touch its capacity.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":69799,"byte_end":69822,"line_start":351,"line_end":351,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":69827,"byte_end":69830,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":69835,"byte_end":69849,"line_start":353,"line_end":353,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":69854,"byte_end":69857,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":69862,"byte_end":69878,"line_start":355,"line_end":355,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":69883,"byte_end":69886,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":69891,"byte_end":69898,"line_start":357,"line_end":357,"column_start":5,"column_end":12}},{"value":"/ use heapless::String;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":69903,"byte_end":69928,"line_start":358,"line_end":358,"column_start":5,"column_end":30}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":69933,"byte_end":69961,"line_start":359,"line_end":359,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":69966,"byte_end":69969,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ let mut s: String<U8> = String::from(\"foo\");","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":69974,"byte_end":70022,"line_start":361,"line_end":361,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":70027,"byte_end":70030,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ s.clear();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":70035,"byte_end":70049,"line_start":363,"line_end":363,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":70054,"byte_end":70057,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ assert!(s.is_empty());","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":70062,"byte_end":70088,"line_start":365,"line_end":365,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(0, s.len());","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":70093,"byte_end":70120,"line_start":366,"line_end":366,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(8, s.capacity());","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":70125,"byte_end":70157,"line_start":367,"line_end":367,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":70162,"byte_end":70169,"line_start":368,"line_end":368,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":70174,"byte_end":70183,"line_start":369,"line_end":369,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":70560,"byte_end":70563,"line_start":388,"line_end":388,"column_start":12,"column_end":15},"name":"len","qualname":"<String<N>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of this `String`, in bytes.","sig":null,"attributes":[{"value":"/ Returns the length of this `String`, in bytes.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":70250,"byte_end":70300,"line_start":374,"line_end":374,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":70305,"byte_end":70308,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":70313,"byte_end":70327,"line_start":376,"line_end":376,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":70332,"byte_end":70335,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":70340,"byte_end":70356,"line_start":378,"line_end":378,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":70361,"byte_end":70364,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":70369,"byte_end":70376,"line_start":380,"line_end":380,"column_start":5,"column_end":12}},{"value":"/ use heapless::String;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":70381,"byte_end":70406,"line_start":381,"line_end":381,"column_start":5,"column_end":30}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":70411,"byte_end":70439,"line_start":382,"line_end":382,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":70444,"byte_end":70447,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ let a: String<U8> = String::from(\"foo\");","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":70452,"byte_end":70496,"line_start":384,"line_end":384,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":70501,"byte_end":70504,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.len(), 3);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":70509,"byte_end":70536,"line_start":386,"line_end":386,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":70541,"byte_end":70548,"line_start":387,"line_end":387,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":562},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":78563,"byte_end":78566,"line_start":38,"line_end":38,"column_start":12,"column_end":15},"name":"Vec","qualname":"::vec::Vec","value":"Vec {  }","parent":null,"children":[{"krate":0,"index":565},{"krate":0,"index":566}],"decl_id":null,"docs":" A fixed capacity [`Vec`](https://doc.rust-lang.org/std/vec/struct.Vec.html)","sig":null,"attributes":[{"value":"/ A fixed capacity [`Vec`](https://doc.rust-lang.org/std/vec/struct.Vec.html)","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":77912,"byte_end":77991,"line_start":9,"line_end":9,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":77992,"byte_end":77995,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":77996,"byte_end":78010,"line_start":11,"line_end":11,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":78011,"byte_end":78014,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":78015,"byte_end":78022,"line_start":13,"line_end":13,"column_start":1,"column_end":8}},{"value":"/ use heapless::Vec;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":78023,"byte_end":78045,"line_start":14,"line_end":14,"column_start":1,"column_end":23}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":78046,"byte_end":78074,"line_start":15,"line_end":15,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":78075,"byte_end":78078,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ // A vector with a fixed capacity of 8 elements allocated on the stack","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":78079,"byte_end":78153,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"/ let mut vec = Vec::<_, U8>::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":78154,"byte_end":78192,"line_start":18,"line_end":18,"column_start":1,"column_end":39}},{"value":"/ vec.push(1);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":78193,"byte_end":78209,"line_start":19,"line_end":19,"column_start":1,"column_end":17}},{"value":"/ vec.push(2);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":78210,"byte_end":78226,"line_start":20,"line_end":20,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":78227,"byte_end":78230,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(vec.len(), 2);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":78231,"byte_end":78260,"line_start":22,"line_end":22,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(vec[0], 1);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":78261,"byte_end":78287,"line_start":23,"line_end":23,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":78288,"byte_end":78291,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(vec.pop(), Some(2));","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":78292,"byte_end":78327,"line_start":25,"line_end":25,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(vec.len(), 1);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":78328,"byte_end":78357,"line_start":26,"line_end":26,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":78358,"byte_end":78361,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ vec[0] = 7;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":78362,"byte_end":78377,"line_start":28,"line_end":28,"column_start":1,"column_end":16}},{"value":"/ assert_eq!(vec[0], 7);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":78378,"byte_end":78404,"line_start":29,"line_end":29,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":78405,"byte_end":78408,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ vec.extend([1, 2, 3].iter().cloned());","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":78409,"byte_end":78451,"line_start":31,"line_end":31,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":78452,"byte_end":78455,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ for x in &vec {","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":78456,"byte_end":78475,"line_start":33,"line_end":33,"column_start":1,"column_end":20}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":78476,"byte_end":78502,"line_start":34,"line_end":34,"column_start":1,"column_end":27}},{"value":"/ }","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":78503,"byte_end":78508,"line_start":35,"line_end":35,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(vec, [7, 1, 2, 3]);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":78509,"byte_end":78543,"line_start":36,"line_end":36,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":78544,"byte_end":78551,"line_start":37,"line_end":37,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":952},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":78851,"byte_end":78854,"line_start":53,"line_end":53,"column_start":22,"column_end":25},"name":"new","qualname":"<Vec<T, N>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new, empty vector with a fixed capacity of `N`\n","sig":null,"attributes":[{"value":"cfg(not(feature = \"const-fn\"))","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/const_fn.rs","byte_start":4992,"byte_end":5025,"line_start":23,"line_end":23,"column_start":9,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":570},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":79105,"byte_end":79113,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"capacity","qualname":"<Vec<T, N>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum number of elements the vector can hold\n","sig":null,"attributes":[{"value":"/ Returns the maximum number of elements the vector can hold","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":79031,"byte_end":79093,"line_start":62,"line_end":62,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":571},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":79220,"byte_end":79225,"line_start":68,"line_end":68,"column_start":12,"column_end":17},"name":"clear","qualname":"<Vec<T, N>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears the vector, removing all values.\n","sig":null,"attributes":[{"value":"/ Clears the vector, removing all values.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":79165,"byte_end":79208,"line_start":67,"line_end":67,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":79796,"byte_end":79813,"line_start":88,"line_end":88,"column_start":12,"column_end":29},"name":"extend_from_slice","qualname":"<Vec<T, N>>::extend_from_slice","value":"fn (&mut self, other: &[T]) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Clones and appends all elements in a slice to the `Vec`.","sig":null,"attributes":[{"value":"/ Clones and appends all elements in a slice to the `Vec`.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":79276,"byte_end":79336,"line_start":72,"line_end":72,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":79341,"byte_end":79344,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ Iterates over the slice `other`, clones each element, and then appends","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":79349,"byte_end":79423,"line_start":74,"line_end":74,"column_start":5,"column_end":79}},{"value":"/ it to this `Vec`. The `other` vector is traversed in-order.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":79428,"byte_end":79491,"line_start":75,"line_end":75,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":79496,"byte_end":79499,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":79504,"byte_end":79518,"line_start":77,"line_end":77,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":79523,"byte_end":79526,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":79531,"byte_end":79538,"line_start":79,"line_end":79,"column_start":5,"column_end":12}},{"value":"/ use heapless::Vec;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":79543,"byte_end":79565,"line_start":80,"line_end":80,"column_start":5,"column_end":27}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":79570,"byte_end":79598,"line_start":81,"line_end":81,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":79603,"byte_end":79606,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ let mut vec = Vec::<u8, U8>::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":79611,"byte_end":79650,"line_start":83,"line_end":83,"column_start":5,"column_end":44}},{"value":"/ vec.push(1).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":79655,"byte_end":79680,"line_start":84,"line_end":84,"column_start":5,"column_end":30}},{"value":"/ vec.extend_from_slice(&[2, 3, 4]).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":79685,"byte_end":79732,"line_start":85,"line_end":85,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(*vec, [1, 2, 3, 4]);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":79737,"byte_end":79772,"line_start":86,"line_end":86,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":79777,"byte_end":79784,"line_start":87,"line_end":87,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":573},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":80289,"byte_end":80292,"line_start":104,"line_end":104,"column_start":12,"column_end":15},"name":"pop","qualname":"<Vec<T, N>>::pop","value":"fn (&mut self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes the last element from a vector and return it, or `None` if it's empty\n","sig":null,"attributes":[{"value":"/ Removes the last element from a vector and return it, or `None` if it's empty","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":80196,"byte_end":80277,"line_start":103,"line_end":103,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":575},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":80825,"byte_end":80829,"line_start":125,"line_end":125,"column_start":12,"column_end":16},"name":"push","qualname":"<Vec<T, N>>::push","value":"fn (&mut self, item: T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Appends an `item` to the back of the collection","sig":null,"attributes":[{"value":"/ Appends an `item` to the back of the collection","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":80700,"byte_end":80751,"line_start":122,"line_end":122,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":80756,"byte_end":80759,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ Returns back the `item` if the vector is full","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":80764,"byte_end":80813,"line_start":124,"line_end":124,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":577},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":81513,"byte_end":81521,"line_start":144,"line_end":144,"column_start":12,"column_end":20},"name":"truncate","qualname":"<Vec<T, N>>::truncate","value":"fn (&mut self, len: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shortens the vector, keeping the first `len` elements and dropping the rest.\n","sig":null,"attributes":[{"value":"/ Shortens the vector, keeping the first `len` elements and dropping the rest.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":81421,"byte_end":81501,"line_start":143,"line_end":143,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":578},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":82306,"byte_end":82312,"line_start":164,"line_end":164,"column_start":12,"column_end":18},"name":"resize","qualname":"<Vec<T, N>>::resize","value":"fn (&mut self, new_len: usize, value: T) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Resizes the Vec in-place so that len is equal to new_len.","sig":null,"attributes":[{"value":"/ Resizes the Vec in-place so that len is equal to new_len.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":81943,"byte_end":82004,"line_start":157,"line_end":157,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":82009,"byte_end":82012,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ If new_len is greater than len, the Vec is extended by the","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":82017,"byte_end":82079,"line_start":159,"line_end":159,"column_start":5,"column_end":67}},{"value":"/ difference, with each additional slot filled with value. If","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":82084,"byte_end":82147,"line_start":160,"line_end":160,"column_start":5,"column_end":68}},{"value":"/ new_len is less than len, the Vec is simply truncated.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":82152,"byte_end":82210,"line_start":161,"line_end":161,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":82215,"byte_end":82218,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ See also [`resize_default`](struct.Vec.html#method.resize_default).","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":82223,"byte_end":82294,"line_start":163,"line_end":163,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":579},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":83082,"byte_end":83096,"line_start":190,"line_end":190,"column_start":12,"column_end":26},"name":"resize_default","qualname":"<Vec<T, N>>::resize_default","value":"fn (&mut self, new_len: usize) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Resizes the `Vec` in-place so that `len` is equal to `new_len`.","sig":null,"attributes":[{"value":"/ Resizes the `Vec` in-place so that `len` is equal to `new_len`.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":82702,"byte_end":82769,"line_start":183,"line_end":183,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":82774,"byte_end":82777,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ If `new_len` is greater than `len`, the `Vec` is extended by the","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":82782,"byte_end":82850,"line_start":185,"line_end":185,"column_start":5,"column_end":73}},{"value":"/ difference, with each additional slot filled with `Default::default()`.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":82855,"byte_end":82930,"line_start":186,"line_end":186,"column_start":5,"column_end":80}},{"value":"/ If `new_len` is less than `len`, the `Vec` is simply truncated.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":82935,"byte_end":83002,"line_start":187,"line_end":187,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":83007,"byte_end":83010,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ See also [`resize`](struct.Vec.html#method.resize).","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":83015,"byte_end":83070,"line_start":189,"line_end":189,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":580},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":84022,"byte_end":84033,"line_start":225,"line_end":225,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<Vec<T, N>>::swap_remove","value":"fn (&mut self, index: usize) -> T","parent":null,"children":[],"decl_id":null,"docs":" Removes an element from the vector and returns it.","sig":null,"attributes":[{"value":"/ Removes an element from the vector and returns it.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":83240,"byte_end":83294,"line_start":197,"line_end":197,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":83299,"byte_end":83302,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ The removed element is replaced by the last element of the vector.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":83307,"byte_end":83377,"line_start":199,"line_end":199,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":83382,"byte_end":83385,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ This does not preserve ordering, but is O(1).","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":83390,"byte_end":83439,"line_start":201,"line_end":201,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":83444,"byte_end":83447,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":83452,"byte_end":83464,"line_start":203,"line_end":203,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":83469,"byte_end":83472,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ Panics if `index` is out of bounds.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":83477,"byte_end":83516,"line_start":205,"line_end":205,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":83521,"byte_end":83524,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":83529,"byte_end":83543,"line_start":207,"line_end":207,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":83548,"byte_end":83551,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":83556,"byte_end":83563,"line_start":209,"line_end":209,"column_start":5,"column_end":12}},{"value":"/ use heapless::Vec;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":83568,"byte_end":83590,"line_start":210,"line_end":210,"column_start":5,"column_end":27}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":83595,"byte_end":83623,"line_start":211,"line_end":211,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":83628,"byte_end":83631,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ let mut v: Vec<_, U8> = Vec::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":83636,"byte_end":83675,"line_start":213,"line_end":213,"column_start":5,"column_end":44}},{"value":"/ v.push(\"foo\").unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":83680,"byte_end":83707,"line_start":214,"line_end":214,"column_start":5,"column_end":32}},{"value":"/ v.push(\"bar\").unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":83712,"byte_end":83739,"line_start":215,"line_end":215,"column_start":5,"column_end":32}},{"value":"/ v.push(\"baz\").unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":83744,"byte_end":83771,"line_start":216,"line_end":216,"column_start":5,"column_end":32}},{"value":"/ v.push(\"qux\").unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":83776,"byte_end":83803,"line_start":217,"line_end":217,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":83808,"byte_end":83811,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(v.swap_remove(1), \"bar\");","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":83816,"byte_end":83856,"line_start":219,"line_end":219,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(&*v, [\"foo\", \"qux\", \"baz\"]);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":83861,"byte_end":83904,"line_start":220,"line_end":220,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":83909,"byte_end":83912,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(v.swap_remove(0), \"foo\");","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":83917,"byte_end":83957,"line_start":222,"line_end":222,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(&*v, [\"baz\", \"qux\"]);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":83962,"byte_end":83998,"line_start":223,"line_end":223,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":84003,"byte_end":84010,"line_start":224,"line_end":224,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":621},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":86398,"byte_end":86406,"line_start":339,"line_end":339,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::vec::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":624},{"krate":0,"index":625}],"decl_id":null,"docs":" An iterator that moves out of an [`Vec`][`Vec`].","sig":null,"attributes":[{"value":"/ An iterator that moves out of an [`Vec`][`Vec`].","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":86177,"byte_end":86229,"line_start":333,"line_end":333,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":86230,"byte_end":86233,"line_start":334,"line_end":334,"column_start":1,"column_end":4}},{"value":"/ This struct is created by calling the `into_iter` method on [`Vec`][`Vec`].","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":86234,"byte_end":86313,"line_start":335,"line_end":335,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":86314,"byte_end":86317,"line_start":336,"line_end":336,"column_start":1,"column_end":4}},{"value":"/ [`Vec`]: (https://doc.rust-lang.org/std/vec/struct.Vec.html)","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":86318,"byte_end":86382,"line_start":337,"line_end":337,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":86383,"byte_end":86386,"line_start":338,"line_end":338,"column_start":1,"column_end":4}}]},{"kind":"Mod","id":{"krate":0,"index":677},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"binary_heap","qualname":"::binary_heap","value":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","parent":null,"children":[{"krate":0,"index":678},{"krate":0,"index":679},{"krate":0,"index":680},{"krate":0,"index":681},{"krate":0,"index":685},{"krate":0,"index":686},{"krate":0,"index":687},{"krate":0,"index":688},{"krate":0,"index":689},{"krate":0,"index":691},{"krate":0,"index":693},{"krate":0,"index":695},{"krate":0,"index":701},{"krate":0,"index":718},{"krate":0,"index":724},{"krate":0,"index":732},{"krate":0,"index":736}],"decl_id":null,"docs":" A priority queue implemented with a binary heap.","sig":null,"attributes":[{"value":"! A priority queue implemented with a binary heap.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":96303,"byte_end":96355,"line_start":1,"line_end":1,"column_start":1,"column_end":53}},{"value":"!","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":96356,"byte_end":96359,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! Insertion and popping the largest element have `O(log n)` time complexity. Checking the largest","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":96360,"byte_end":96459,"line_start":3,"line_end":3,"column_start":1,"column_end":100}},{"value":"! / smallest element is `O(1)`.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":96460,"byte_end":96493,"line_start":4,"line_end":4,"column_start":1,"column_end":34}}]},{"kind":"Enum","id":{"krate":0,"index":687},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":96926,"byte_end":96929,"line_start":21,"line_end":21,"column_start":10,"column_end":13},"name":"Min","qualname":"::binary_heap::Min","value":"Min::{}","parent":null,"children":[],"decl_id":null,"docs":" Min-heap\n","sig":null,"attributes":[{"value":"/ Min-heap","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":96904,"byte_end":96916,"line_start":20,"line_end":20,"column_start":1,"column_end":13}}]},{"kind":"Enum","id":{"krate":0,"index":688},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":96956,"byte_end":96959,"line_start":24,"line_end":24,"column_start":10,"column_end":13},"name":"Max","qualname":"::binary_heap::Max","value":"Max::{}","parent":null,"children":[],"decl_id":null,"docs":" Max-heap\n","sig":null,"attributes":[{"value":"/ Max-heap","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":96934,"byte_end":96946,"line_start":23,"line_end":23,"column_start":1,"column_end":13}}]},{"kind":"Trait","id":{"krate":0,"index":689},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":97076,"byte_end":97080,"line_start":29,"line_end":29,"column_start":18,"column_end":22},"name":"Kind","qualname":"::binary_heap::Kind","value":"Kind","parent":null,"children":[{"krate":0,"index":690}],"decl_id":null,"docs":" The binary heap kind: min-heap or max-heap","sig":null,"attributes":[{"value":"/ The binary heap kind: min-heap or max-heap","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":96964,"byte_end":97010,"line_start":26,"line_end":26,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":97011,"byte_end":97014,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ Do *not* implement this trait yourself!","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":97015,"byte_end":97058,"line_start":28,"line_end":28,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":690},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":97109,"byte_end":97117,"line_start":31,"line_end":31,"column_start":8,"column_end":16},"name":"ordering","qualname":"::binary_heap::Kind::ordering","value":"fn () -> Ordering","parent":{"krate":0,"index":689},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":695},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":98882,"byte_end":98892,"line_start":93,"line_end":93,"column_start":12,"column_end":22},"name":"BinaryHeap","qualname":"::binary_heap::BinaryHeap","value":"BinaryHeap {  }","parent":null,"children":[{"krate":0,"index":699},{"krate":0,"index":700}],"decl_id":null,"docs":" A priority queue implemented with a binary heap.","sig":null,"attributes":[{"value":"/ A priority queue implemented with a binary heap.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":97321,"byte_end":97373,"line_start":46,"line_end":46,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":97374,"byte_end":97377,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ This can be either a min-heap or a max-heap.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":97378,"byte_end":97426,"line_start":48,"line_end":48,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":97427,"byte_end":97430,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ It is a logic error for an item to be modified in such a way that the item's ordering relative","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":97431,"byte_end":97529,"line_start":50,"line_end":50,"column_start":1,"column_end":99}},{"value":"/ to any other item, as determined by the `Ord` trait, changes while it is in the heap. This is","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":97530,"byte_end":97627,"line_start":51,"line_end":51,"column_start":1,"column_end":98}},{"value":"/ normally only possible through `Cell`, `RefCell`, global state, I/O, or unsafe code.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":97628,"byte_end":97716,"line_start":52,"line_end":52,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":97717,"byte_end":97720,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":97721,"byte_end":97728,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/ use heapless::binary_heap::{BinaryHeap, Max};","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":97729,"byte_end":97778,"line_start":55,"line_end":55,"column_start":1,"column_end":50}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":97779,"byte_end":97807,"line_start":56,"line_end":56,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":97808,"byte_end":97811,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ let mut heap: BinaryHeap<_, U8, Max> = BinaryHeap::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":97812,"byte_end":97873,"line_start":58,"line_end":58,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":97874,"byte_end":97877,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ // We can use peek to look at the next item in the heap. In this case,","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":97878,"byte_end":97952,"line_start":60,"line_end":60,"column_start":1,"column_end":75}},{"value":"/ // there's no items in there yet so we get None.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":97953,"byte_end":98005,"line_start":61,"line_end":61,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(heap.peek(), None);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":98006,"byte_end":98040,"line_start":62,"line_end":62,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":98041,"byte_end":98044,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ // Let's add some scores...","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":98045,"byte_end":98076,"line_start":64,"line_end":64,"column_start":1,"column_end":32}},{"value":"/ heap.push(1).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":98077,"byte_end":98103,"line_start":65,"line_end":65,"column_start":1,"column_end":27}},{"value":"/ heap.push(5).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":98104,"byte_end":98130,"line_start":66,"line_end":66,"column_start":1,"column_end":27}},{"value":"/ heap.push(2).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":98131,"byte_end":98157,"line_start":67,"line_end":67,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":98158,"byte_end":98161,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ // Now peek shows the most important item in the heap.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":98162,"byte_end":98220,"line_start":69,"line_end":69,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(heap.peek(), Some(&5));","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":98221,"byte_end":98259,"line_start":70,"line_end":70,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":98260,"byte_end":98263,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ // We can check the length of a heap.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":98264,"byte_end":98305,"line_start":72,"line_end":72,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(heap.len(), 3);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":98306,"byte_end":98336,"line_start":73,"line_end":73,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":98337,"byte_end":98340,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ // We can iterate over the items in the heap, although they are returned in","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":98341,"byte_end":98420,"line_start":75,"line_end":75,"column_start":1,"column_end":80}},{"value":"/ // a random order.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":98421,"byte_end":98443,"line_start":76,"line_end":76,"column_start":1,"column_end":23}},{"value":"/ for x in &heap {","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":98444,"byte_end":98464,"line_start":77,"line_end":77,"column_start":1,"column_end":21}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":98465,"byte_end":98491,"line_start":78,"line_end":78,"column_start":1,"column_end":27}},{"value":"/ }","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":98492,"byte_end":98497,"line_start":79,"line_end":79,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":98498,"byte_end":98501,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ // If we instead pop these scores, they should come back in order.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":98502,"byte_end":98572,"line_start":81,"line_end":81,"column_start":1,"column_end":71}},{"value":"/ assert_eq!(heap.pop(), Some(5));","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":98573,"byte_end":98609,"line_start":82,"line_end":82,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(heap.pop(), Some(2));","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":98610,"byte_end":98646,"line_start":83,"line_end":83,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(heap.pop(), Some(1));","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":98647,"byte_end":98683,"line_start":84,"line_end":84,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(heap.pop(), None);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":98684,"byte_end":98717,"line_start":85,"line_end":85,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":98718,"byte_end":98721,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ // We can clear the heap of any remaining items.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":98722,"byte_end":98774,"line_start":87,"line_end":87,"column_start":1,"column_end":53}},{"value":"/ heap.clear();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":98775,"byte_end":98792,"line_start":88,"line_end":88,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":98793,"byte_end":98796,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ // The heap should now be empty.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":98797,"byte_end":98833,"line_start":90,"line_end":90,"column_start":1,"column_end":37}},{"value":"/ assert!(heap.is_empty())","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":98834,"byte_end":98862,"line_start":91,"line_end":91,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":98863,"byte_end":98870,"line_start":92,"line_end":92,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1568},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":99478,"byte_end":99481,"line_start":121,"line_end":121,"column_start":22,"column_end":25},"name":"new","qualname":"<BinaryHeap<T, N, K>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty BinaryHeap as a $K-heap.","sig":null,"attributes":[{"value":"cfg(not(feature = \"const-fn\"))","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/const_fn.rs","byte_start":4992,"byte_end":5025,"line_start":23,"line_end":23,"column_start":9,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":705},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":99702,"byte_end":99710,"line_start":131,"line_end":131,"column_start":12,"column_end":20},"name":"capacity","qualname":"<BinaryHeap<T, N, K>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the capacity of the binary heap.\n","sig":null,"attributes":[{"value":"/ Returns the capacity of the binary heap.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":99646,"byte_end":99690,"line_start":130,"line_end":130,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":100192,"byte_end":100197,"line_start":151,"line_end":151,"column_start":12,"column_end":17},"name":"clear","qualname":"<BinaryHeap<T, N, K>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Drops all items from the binary heap.","sig":null,"attributes":[{"value":"/ Drops all items from the binary heap.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":99769,"byte_end":99810,"line_start":135,"line_end":135,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":99815,"byte_end":99818,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":99823,"byte_end":99830,"line_start":137,"line_end":137,"column_start":5,"column_end":12}},{"value":"/ use heapless::binary_heap::{BinaryHeap, Max};","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":99835,"byte_end":99884,"line_start":138,"line_end":138,"column_start":5,"column_end":54}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":99889,"byte_end":99917,"line_start":139,"line_end":139,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":99922,"byte_end":99925,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ let mut heap: BinaryHeap<_, U8, Max> = BinaryHeap::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":99930,"byte_end":99991,"line_start":141,"line_end":141,"column_start":5,"column_end":66}},{"value":"/ heap.push(1).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":99996,"byte_end":100022,"line_start":142,"line_end":142,"column_start":5,"column_end":31}},{"value":"/ heap.push(3).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":100027,"byte_end":100053,"line_start":143,"line_end":143,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":100058,"byte_end":100061,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ assert!(!heap.is_empty());","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":100066,"byte_end":100096,"line_start":145,"line_end":145,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":100101,"byte_end":100104,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ heap.clear();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":100109,"byte_end":100126,"line_start":147,"line_end":147,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":100131,"byte_end":100134,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ assert!(heap.is_empty());","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":100139,"byte_end":100168,"line_start":149,"line_end":149,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":100173,"byte_end":100180,"line_start":150,"line_end":150,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":100600,"byte_end":100603,"line_start":167,"line_end":167,"column_start":12,"column_end":15},"name":"len","qualname":"<BinaryHeap<T, N, K>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the binary heap.","sig":null,"attributes":[{"value":"/ Returns the length of the binary heap.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":100248,"byte_end":100290,"line_start":155,"line_end":155,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":100295,"byte_end":100298,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":100303,"byte_end":100310,"line_start":157,"line_end":157,"column_start":5,"column_end":12}},{"value":"/ use heapless::binary_heap::{BinaryHeap, Max};","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":100315,"byte_end":100364,"line_start":158,"line_end":158,"column_start":5,"column_end":54}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":100369,"byte_end":100397,"line_start":159,"line_end":159,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":100402,"byte_end":100405,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ let mut heap: BinaryHeap<_, U8, Max> = BinaryHeap::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":100410,"byte_end":100471,"line_start":161,"line_end":161,"column_start":5,"column_end":66}},{"value":"/ heap.push(1).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":100476,"byte_end":100502,"line_start":162,"line_end":162,"column_start":5,"column_end":31}},{"value":"/ heap.push(3).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":100507,"byte_end":100533,"line_start":163,"line_end":163,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":100538,"byte_end":100541,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(heap.len(), 2);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":100546,"byte_end":100576,"line_start":165,"line_end":165,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":100581,"byte_end":100588,"line_start":166,"line_end":166,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":101087,"byte_end":101095,"line_start":187,"line_end":187,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<BinaryHeap<T, N, K>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if the binary heap is empty.","sig":null,"attributes":[{"value":"/ Checks if the binary heap is empty.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":100657,"byte_end":100696,"line_start":171,"line_end":171,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":100701,"byte_end":100704,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":100709,"byte_end":100716,"line_start":173,"line_end":173,"column_start":5,"column_end":12}},{"value":"/ use heapless::binary_heap::{BinaryHeap, Max};","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":100721,"byte_end":100770,"line_start":174,"line_end":174,"column_start":5,"column_end":54}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":100775,"byte_end":100803,"line_start":175,"line_end":175,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":100808,"byte_end":100811,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ let mut heap: BinaryHeap<_, U8, Max> = BinaryHeap::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":100816,"byte_end":100877,"line_start":177,"line_end":177,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":100882,"byte_end":100885,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ assert!(heap.is_empty());","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":100890,"byte_end":100919,"line_start":179,"line_end":179,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":100924,"byte_end":100927,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ heap.push(3).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":100932,"byte_end":100958,"line_start":181,"line_end":181,"column_start":5,"column_end":31}},{"value":"/ heap.push(5).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":100963,"byte_end":100989,"line_start":182,"line_end":182,"column_start":5,"column_end":31}},{"value":"/ heap.push(1).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":100994,"byte_end":101020,"line_start":183,"line_end":183,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":101025,"byte_end":101028,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ assert!(!heap.is_empty());","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":101033,"byte_end":101063,"line_start":185,"line_end":185,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":101068,"byte_end":101075,"line_start":186,"line_end":186,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":709},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":101701,"byte_end":101705,"line_start":209,"line_end":209,"column_start":12,"column_end":16},"name":"iter","qualname":"<BinaryHeap<T, N, K>>::iter","value":"fn (&self) -> slice::Iter<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator visiting all values in the underlying vector, in arbitrary order.","sig":null,"attributes":[{"value":"/ Returns an iterator visiting all values in the underlying vector, in arbitrary order.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":101148,"byte_end":101237,"line_start":191,"line_end":191,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":101242,"byte_end":101245,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":101250,"byte_end":101257,"line_start":193,"line_end":193,"column_start":5,"column_end":12}},{"value":"/ use heapless::binary_heap::{BinaryHeap, Max};","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":101262,"byte_end":101311,"line_start":194,"line_end":194,"column_start":5,"column_end":54}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":101316,"byte_end":101344,"line_start":195,"line_end":195,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":101349,"byte_end":101352,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ let mut heap: BinaryHeap<_, U8, Max> = BinaryHeap::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":101357,"byte_end":101418,"line_start":197,"line_end":197,"column_start":5,"column_end":66}},{"value":"/ heap.push(1).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":101423,"byte_end":101449,"line_start":198,"line_end":198,"column_start":5,"column_end":31}},{"value":"/ heap.push(2).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":101454,"byte_end":101480,"line_start":199,"line_end":199,"column_start":5,"column_end":31}},{"value":"/ heap.push(3).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":101485,"byte_end":101511,"line_start":200,"line_end":200,"column_start":5,"column_end":31}},{"value":"/ heap.push(4).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":101516,"byte_end":101542,"line_start":201,"line_end":201,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":101547,"byte_end":101550,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ // Print 1, 2, 3, 4 in arbitrary order","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":101555,"byte_end":101597,"line_start":203,"line_end":203,"column_start":5,"column_end":47}},{"value":"/ for x in heap.iter() {","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":101602,"byte_end":101628,"line_start":204,"line_end":204,"column_start":5,"column_end":31}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":101633,"byte_end":101659,"line_start":205,"line_end":205,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":101664,"byte_end":101667,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ }","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":101672,"byte_end":101677,"line_start":207,"line_end":207,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":101682,"byte_end":101689,"line_start":208,"line_end":208,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":101996,"byte_end":102004,"line_start":217,"line_end":217,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<BinaryHeap<T, N, K>>::iter_mut","value":"fn (&mut self) -> slice::IterMut<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable iterator visiting all values in the underlying vector, in arbitrary order.","sig":null,"attributes":[{"value":"/ Returns a mutable iterator visiting all values in the underlying vector, in arbitrary order.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":101769,"byte_end":101865,"line_start":213,"line_end":213,"column_start":5,"column_end":101}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":101870,"byte_end":101873,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ **WARNING** Mutating the items in the binary heap can leave the heap in an inconsistent","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":101878,"byte_end":101969,"line_start":215,"line_end":215,"column_start":5,"column_end":96}},{"value":"/ state.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":101974,"byte_end":101984,"line_start":216,"line_end":216,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":711},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":102590,"byte_end":102594,"line_start":236,"line_end":236,"column_start":12,"column_end":16},"name":"peek","qualname":"<BinaryHeap<T, N, K>>::peek","value":"fn (&self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the *top* (greatest if max-heap, smallest if min-heap) item in the binary heap, or\n None if it is empty.","sig":null,"attributes":[{"value":"/ Returns the *top* (greatest if max-heap, smallest if min-heap) item in the binary heap, or","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":102079,"byte_end":102173,"line_start":221,"line_end":221,"column_start":5,"column_end":99}},{"value":"/ None if it is empty.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":102178,"byte_end":102202,"line_start":222,"line_end":222,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":102207,"byte_end":102210,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":102215,"byte_end":102222,"line_start":224,"line_end":224,"column_start":5,"column_end":12}},{"value":"/ use heapless::binary_heap::{BinaryHeap, Max};","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":102227,"byte_end":102276,"line_start":225,"line_end":225,"column_start":5,"column_end":54}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":102281,"byte_end":102309,"line_start":226,"line_end":226,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":102314,"byte_end":102317,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ let mut heap: BinaryHeap<_, U8, Max> = BinaryHeap::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":102322,"byte_end":102383,"line_start":228,"line_end":228,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(heap.peek(), None);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":102388,"byte_end":102422,"line_start":229,"line_end":229,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":102427,"byte_end":102430,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ heap.push(1).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":102435,"byte_end":102461,"line_start":231,"line_end":231,"column_start":5,"column_end":31}},{"value":"/ heap.push(5).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":102466,"byte_end":102492,"line_start":232,"line_end":232,"column_start":5,"column_end":31}},{"value":"/ heap.push(2).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":102497,"byte_end":102523,"line_start":233,"line_end":233,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(heap.peek(), Some(&5));","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":102528,"byte_end":102566,"line_start":234,"line_end":234,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":102571,"byte_end":102578,"line_start":235,"line_end":235,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":712},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":103189,"byte_end":103192,"line_start":255,"line_end":255,"column_start":12,"column_end":15},"name":"pop","qualname":"<BinaryHeap<T, N, K>>::pop","value":"fn (&mut self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes the *top* (greatest if max-heap, smallest if min-heap) item from the binary heap and\n returns it, or None if it is empty.","sig":null,"attributes":[{"value":"/ Removes the *top* (greatest if max-heap, smallest if min-heap) item from the binary heap and","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":102654,"byte_end":102750,"line_start":240,"line_end":240,"column_start":5,"column_end":101}},{"value":"/ returns it, or None if it is empty.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":102755,"byte_end":102794,"line_start":241,"line_end":241,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":102799,"byte_end":102802,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":102807,"byte_end":102814,"line_start":243,"line_end":243,"column_start":5,"column_end":12}},{"value":"/ use heapless::binary_heap::{BinaryHeap, Max};","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":102819,"byte_end":102868,"line_start":244,"line_end":244,"column_start":5,"column_end":54}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":102873,"byte_end":102901,"line_start":245,"line_end":245,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":102906,"byte_end":102909,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ let mut heap: BinaryHeap<_, U8, Max> = BinaryHeap::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":102914,"byte_end":102975,"line_start":247,"line_end":247,"column_start":5,"column_end":66}},{"value":"/ heap.push(1).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":102980,"byte_end":103006,"line_start":248,"line_end":248,"column_start":5,"column_end":31}},{"value":"/ heap.push(3).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":103011,"byte_end":103037,"line_start":249,"line_end":249,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":103042,"byte_end":103045,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(heap.pop(), Some(3));","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":103050,"byte_end":103086,"line_start":251,"line_end":251,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(heap.pop(), Some(1));","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":103091,"byte_end":103127,"line_start":252,"line_end":252,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(heap.pop(), None);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":103132,"byte_end":103165,"line_start":253,"line_end":253,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":103170,"byte_end":103177,"line_start":254,"line_end":254,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":713},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":103534,"byte_end":103547,"line_start":265,"line_end":265,"column_start":19,"column_end":32},"name":"pop_unchecked","qualname":"<BinaryHeap<T, N, K>>::pop_unchecked","value":"fn (&mut self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Removes the *top* (greatest if max-heap, smallest if min-heap) item from the binary heap and\n returns it, without checking if the binary heap is empty.\n","sig":null,"attributes":[{"value":"/ Removes the *top* (greatest if max-heap, smallest if min-heap) item from the binary heap and","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":103353,"byte_end":103449,"line_start":263,"line_end":263,"column_start":5,"column_end":101}},{"value":"/ returns it, without checking if the binary heap is empty.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":103454,"byte_end":103515,"line_start":264,"line_end":264,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":714},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":104199,"byte_end":104203,"line_start":289,"line_end":289,"column_start":12,"column_end":16},"name":"push","qualname":"<BinaryHeap<T, N, K>>::push","value":"fn (&mut self, item: T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Pushes an item onto the binary heap.","sig":null,"attributes":[{"value":"/ Pushes an item onto the binary heap.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":103775,"byte_end":103815,"line_start":275,"line_end":275,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":103820,"byte_end":103823,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":103828,"byte_end":103835,"line_start":277,"line_end":277,"column_start":5,"column_end":12}},{"value":"/ use heapless::binary_heap::{BinaryHeap, Max};","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":103840,"byte_end":103889,"line_start":278,"line_end":278,"column_start":5,"column_end":54}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":103894,"byte_end":103922,"line_start":279,"line_end":279,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":103927,"byte_end":103930,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ let mut heap: BinaryHeap<_, U8, Max> = BinaryHeap::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":103935,"byte_end":103996,"line_start":281,"line_end":281,"column_start":5,"column_end":66}},{"value":"/ heap.push(3).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":104001,"byte_end":104027,"line_start":282,"line_end":282,"column_start":5,"column_end":31}},{"value":"/ heap.push(5).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":104032,"byte_end":104058,"line_start":283,"line_end":283,"column_start":5,"column_end":31}},{"value":"/ heap.push(1).unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":104063,"byte_end":104089,"line_start":284,"line_end":284,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":104094,"byte_end":104097,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(heap.len(), 3);","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":104102,"byte_end":104132,"line_start":286,"line_end":286,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(heap.peek(), Some(&5));","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":104137,"byte_end":104175,"line_start":287,"line_end":287,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":104180,"byte_end":104187,"line_start":288,"line_end":288,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":715},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":104483,"byte_end":104497,"line_start":299,"line_end":299,"column_start":19,"column_end":33},"name":"push_unchecked","qualname":"<BinaryHeap<T, N, K>>::push_unchecked","value":"fn (&mut self, item: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Pushes an item onto the binary heap without first checking if it's full.\n","sig":null,"attributes":[{"value":"/ Pushes an item onto the binary heap without first checking if it's full.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":104388,"byte_end":104464,"line_start":298,"line_end":298,"column_start":5,"column_end":81}}]},{"kind":"Mod","id":{"krate":0,"index":744},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ring_buffer","qualname":"::ring_buffer","value":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","parent":null,"children":[{"krate":0,"index":745},{"krate":0,"index":746},{"krate":0,"index":747},{"krate":0,"index":748},{"krate":0,"index":751},{"krate":0,"index":755},{"krate":0,"index":758},{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":807},{"krate":0,"index":812},{"krate":0,"index":815},{"krate":0,"index":820},{"krate":0,"index":823},{"krate":0,"index":829},{"krate":0,"index":836},{"krate":0,"index":845},{"krate":0,"index":850},{"krate":0,"index":858},{"krate":0,"index":866},{"krate":0,"index":867},{"krate":0,"index":1587},{"krate":0,"index":870},{"krate":0,"index":878},{"krate":0,"index":886},{"krate":0,"index":887},{"krate":0,"index":888},{"krate":0,"index":1595},{"krate":0,"index":1602}],"decl_id":null,"docs":" Ring buffer\n","sig":null,"attributes":[{"value":"! Ring buffer","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":110544,"byte_end":110559,"line_start":1,"line_end":1,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":780},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/spsc.rs","byte_start":128021,"byte_end":128026,"line_start":17,"line_end":17,"column_start":12,"column_end":17},"name":"split","qualname":"<RingBuffer<T, N, U>>::split","value":"fn <'rb> (&'rb mut self) -> (Producer<'rb, T, N, U>, Consumer<'rb, T, N, U>)","parent":null,"children":[],"decl_id":null,"docs":" Splits a statically allocated ring buffer into producer and consumer end points\n","sig":null,"attributes":[{"value":"/ Splits a statically allocated ring buffer into producer and consumer end points","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/spsc.rs","byte_start":127926,"byte_end":128009,"line_start":16,"line_end":16,"column_start":5,"column_end":88}}]},{"kind":"Struct","id":{"krate":0,"index":782},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/spsc.rs","byte_start":128564,"byte_end":128572,"line_start":33,"line_end":33,"column_start":12,"column_end":20},"name":"Consumer","qualname":"::ring_buffer::spsc::Consumer","value":"Consumer {  }","parent":null,"children":[{"krate":0,"index":787},{"krate":0,"index":788}],"decl_id":null,"docs":" A ring buffer \"consumer\"; it can dequeue items from the ring buffer\n","sig":null,"attributes":[{"value":"/ A ring buffer \"consumer\"; it can dequeue items from the ring buffer","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/spsc.rs","byte_start":128404,"byte_end":128475,"line_start":31,"line_end":31,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":794},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/spsc.rs","byte_start":129119,"byte_end":129127,"line_start":54,"line_end":54,"column_start":12,"column_end":20},"name":"Producer","qualname":"::ring_buffer::spsc::Producer","value":"Producer {  }","parent":null,"children":[{"krate":0,"index":799},{"krate":0,"index":800}],"decl_id":null,"docs":" A ring buffer \"producer\"; it can enqueue items into the ring buffer\n","sig":null,"attributes":[{"value":"/ A ring buffer \"producer\"; it can enqueue items into the ring buffer","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/spsc.rs","byte_start":128959,"byte_end":129030,"line_start":52,"line_end":52,"column_start":1,"column_end":72}}]},{"kind":"Trait","id":{"krate":0,"index":807},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":111125,"byte_end":111128,"line_start":22,"line_end":22,"column_start":18,"column_end":21},"name":"Uxx","qualname":"::ring_buffer::Uxx","value":"Uxx: Into<usize> + Send + private::Sealed","parent":null,"children":[{"krate":0,"index":808},{"krate":0,"index":809},{"krate":0,"index":810},{"krate":0,"index":811}],"decl_id":null,"docs":" Types that can be used as `RingBuffer` indices: `u8`, `u16` and `usize","sig":null,"attributes":[{"value":"/ Types that can be used as `RingBuffer` indices: `u8`, `u16` and `usize","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":110955,"byte_end":111029,"line_start":19,"line_end":19,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":111030,"byte_end":111033,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ This trait is sealed and cannot be implemented outside of `heapless`.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":111034,"byte_end":111107,"line_start":21,"line_end":21,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":808},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":111195,"byte_end":111203,"line_start":24,"line_end":24,"column_start":8,"column_end":16},"name":"truncate","qualname":"::ring_buffer::Uxx::truncate","value":"fn (x: usize) -> Self","parent":{"krate":0,"index":807},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":809},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":111455,"byte_end":111467,"line_start":34,"line_end":34,"column_start":8,"column_end":20},"name":"load_acquire","qualname":"::ring_buffer::Uxx::load_acquire","value":"fn (x: *mut Self) -> Self","parent":{"krate":0,"index":807},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(not(feature = \"smaller-atomics\"))","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":111388,"byte_end":111428,"line_start":32,"line_end":32,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":810},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":111727,"byte_end":111739,"line_start":44,"line_end":44,"column_start":8,"column_end":20},"name":"load_relaxed","qualname":"::ring_buffer::Uxx::load_relaxed","value":"fn (x: *mut Self) -> Self","parent":{"krate":0,"index":807},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(not(feature = \"smaller-atomics\"))","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":111660,"byte_end":111700,"line_start":42,"line_end":42,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":811},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":112005,"byte_end":112018,"line_start":54,"line_end":54,"column_start":8,"column_end":21},"name":"store_release","qualname":"::ring_buffer::Uxx::store_release","value":"fn (x: *mut Self, val: Self) -> ()","parent":{"krate":0,"index":807},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(not(feature = \"smaller-atomics\"))","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":111938,"byte_end":111978,"line_start":52,"line_end":52,"column_start":5,"column_end":45}}]},{"kind":"Trait","id":{"krate":0,"index":813},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":112076,"byte_end":112082,"line_start":58,"line_end":58,"column_start":15,"column_end":21},"name":"Sealed","qualname":"::ring_buffer::private::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":829},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":116237,"byte_end":116247,"line_start":221,"line_end":221,"column_start":12,"column_end":22},"name":"RingBuffer","qualname":"::ring_buffer::RingBuffer","value":"RingBuffer {  }","parent":null,"children":[{"krate":0,"index":833},{"krate":0,"index":834},{"krate":0,"index":835}],"decl_id":null,"docs":" A statically allocated ring buffer with a capacity of `N`","sig":null,"attributes":[{"value":"/ A statically allocated ring buffer with a capacity of `N`","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":114040,"byte_end":114101,"line_start":150,"line_end":150,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":114102,"byte_end":114105,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ By default `RingBuffer` will use `usize` integers to hold the indices to its head and tail. For","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":114106,"byte_end":114205,"line_start":152,"line_end":152,"column_start":1,"column_end":100}},{"value":"/ small ring buffers `usize` may be overkill. However, `RingBuffer`'s index type is generic and","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":114206,"byte_end":114303,"line_start":153,"line_end":153,"column_start":1,"column_end":98}},{"value":"/ can be changed to `u8` or `u16` to reduce its footprint. The easiest to construct a `RingBuffer`","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":114304,"byte_end":114404,"line_start":154,"line_end":154,"column_start":1,"column_end":101}},{"value":"/ with a smaller index type is to use the [`u8`] and [`u16`] constructors.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":114405,"byte_end":114481,"line_start":155,"line_end":155,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":114482,"byte_end":114485,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ [`u8`]: struct.RingBuffer.html#method.u8","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":114486,"byte_end":114530,"line_start":157,"line_end":157,"column_start":1,"column_end":45}},{"value":"/ [`u16`]: struct.RingBuffer.html#method.u16","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":114531,"byte_end":114577,"line_start":158,"line_end":158,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":114578,"byte_end":114581,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":114582,"byte_end":114596,"line_start":160,"line_end":160,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":114597,"byte_end":114600,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":114601,"byte_end":114608,"line_start":162,"line_end":162,"column_start":1,"column_end":8}},{"value":"/ use heapless::RingBuffer;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":114609,"byte_end":114638,"line_start":163,"line_end":163,"column_start":1,"column_end":30}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":114639,"byte_end":114667,"line_start":164,"line_end":164,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":114668,"byte_end":114671,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ let mut rb: RingBuffer<u8, U3> = RingBuffer::new();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":114672,"byte_end":114727,"line_start":166,"line_end":166,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":114728,"byte_end":114731,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ assert!(rb.enqueue(0).is_ok());","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":114732,"byte_end":114767,"line_start":168,"line_end":168,"column_start":1,"column_end":36}},{"value":"/ assert!(rb.enqueue(1).is_ok());","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":114768,"byte_end":114803,"line_start":169,"line_end":169,"column_start":1,"column_end":36}},{"value":"/ assert!(rb.enqueue(2).is_ok());","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":114804,"byte_end":114839,"line_start":170,"line_end":170,"column_start":1,"column_end":36}},{"value":"/ assert!(rb.enqueue(3).is_err()); // full","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":114840,"byte_end":114884,"line_start":171,"line_end":171,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":114885,"byte_end":114888,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(rb.dequeue(), Some(0));","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":114889,"byte_end":114927,"line_start":173,"line_end":173,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":114928,"byte_end":114935,"line_start":174,"line_end":174,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":114936,"byte_end":114939,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"/ ### Single producer single consumer mode","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":114940,"byte_end":114984,"line_start":176,"line_end":176,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":114985,"byte_end":114988,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":114989,"byte_end":114996,"line_start":178,"line_end":178,"column_start":1,"column_end":8}},{"value":"/ use heapless::RingBuffer;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":114997,"byte_end":115026,"line_start":179,"line_end":179,"column_start":1,"column_end":30}},{"value":"/ use heapless::consts::*;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":115027,"byte_end":115055,"line_start":180,"line_end":180,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":115056,"byte_end":115059,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ // static mut RB: RingBuffer<Event, U4> = RingBuffer::new(); // requires feature `const-fn`","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":115060,"byte_end":115155,"line_start":182,"line_end":182,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":115156,"byte_end":115159,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ static mut RB: Option<RingBuffer<Event, U4>>  = None;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":115160,"byte_end":115217,"line_start":184,"line_end":184,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":115218,"byte_end":115221,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ enum Event { A, B }","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":115222,"byte_end":115245,"line_start":186,"line_end":186,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":115246,"byte_end":115249,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":115250,"byte_end":115265,"line_start":188,"line_end":188,"column_start":1,"column_end":16}},{"value":"/     unsafe { RB = Some(RingBuffer::new()) };","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":115266,"byte_end":115314,"line_start":189,"line_end":189,"column_start":1,"column_end":49}},{"value":"/     // NOTE(unsafe) beware of aliasing the `consumer` end point","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":115315,"byte_end":115382,"line_start":190,"line_end":190,"column_start":1,"column_end":68}},{"value":"/     let mut consumer = unsafe { RB.as_mut().unwrap().split().1 };","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":115383,"byte_end":115452,"line_start":191,"line_end":191,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":115453,"byte_end":115456,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/     loop {","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":115457,"byte_end":115471,"line_start":193,"line_end":193,"column_start":1,"column_end":15}},{"value":"/         // `dequeue` is a lockless operation","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":115472,"byte_end":115520,"line_start":194,"line_end":194,"column_start":1,"column_end":49}},{"value":"/         match consumer.dequeue() {","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":115521,"byte_end":115559,"line_start":195,"line_end":195,"column_start":1,"column_end":39}},{"value":"/             Some(Event::A) => { /* .. */ },","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":115560,"byte_end":115607,"line_start":196,"line_end":196,"column_start":1,"column_end":48}},{"value":"/             Some(Event::B) => { /* .. */ },","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":115608,"byte_end":115655,"line_start":197,"line_end":197,"column_start":1,"column_end":48}},{"value":"/             None => { /* sleep */},","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":115656,"byte_end":115695,"line_start":198,"line_end":198,"column_start":1,"column_end":40}},{"value":"/         }","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":115696,"byte_end":115709,"line_start":199,"line_end":199,"column_start":1,"column_end":14}},{"value":"/ #       break","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":115710,"byte_end":115727,"line_start":200,"line_end":200,"column_start":1,"column_end":18}},{"value":"/     }","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":115728,"byte_end":115737,"line_start":201,"line_end":201,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":115738,"byte_end":115743,"line_start":202,"line_end":202,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":115744,"byte_end":115747,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ // this is a different execution context that can preempt `main`","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":115748,"byte_end":115816,"line_start":204,"line_end":204,"column_start":1,"column_end":69}},{"value":"/ fn interrupt_handler() {","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":115817,"byte_end":115845,"line_start":205,"line_end":205,"column_start":1,"column_end":29}},{"value":"/     // NOTE(unsafe) beware of aliasing the `producer` end point","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":115846,"byte_end":115913,"line_start":206,"line_end":206,"column_start":1,"column_end":68}},{"value":"/     let mut producer = unsafe { RB.as_mut().unwrap().split().0 };","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":115914,"byte_end":115983,"line_start":207,"line_end":207,"column_start":1,"column_end":70}},{"value":"/ #   let condition = true;","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":115984,"byte_end":116013,"line_start":208,"line_end":208,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":116014,"byte_end":116017,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"/     // ..","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":116018,"byte_end":116031,"line_start":210,"line_end":210,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":116032,"byte_end":116035,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/     if condition {","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":116036,"byte_end":116058,"line_start":212,"line_end":212,"column_start":1,"column_end":23}},{"value":"/         producer.enqueue(Event::A).ok().unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":116059,"byte_end":116112,"line_start":213,"line_end":213,"column_start":1,"column_end":54}},{"value":"/     } else {","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":116113,"byte_end":116129,"line_start":214,"line_end":214,"column_start":1,"column_end":17}},{"value":"/         producer.enqueue(Event::B).ok().unwrap();","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":116130,"byte_end":116183,"line_start":215,"line_end":215,"column_start":1,"column_end":54}},{"value":"/     }","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":116184,"byte_end":116193,"line_start":216,"line_end":216,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":116194,"byte_end":116197,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"/     // ..","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":116198,"byte_end":116211,"line_start":218,"line_end":218,"column_start":1,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":116212,"byte_end":116217,"line_start":219,"line_end":219,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":116218,"byte_end":116225,"line_start":220,"line_end":220,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":840},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":116726,"byte_end":116734,"line_start":243,"line_end":243,"column_start":12,"column_end":20},"name":"capacity","qualname":"<RingBuffer<T, N, U>>::capacity","value":"fn (&self) -> U","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum number of elements the ring buffer can hold\n","sig":null,"attributes":[{"value":"/ Returns the maximum number of elements the ring buffer can hold","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":116647,"byte_end":116714,"line_start":242,"line_end":242,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":841},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":116862,"byte_end":116870,"line_start":248,"line_end":248,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<RingBuffer<T, N, U>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the ring buffer has a length of 0\n","sig":null,"attributes":[{"value":"/ Returns `true` if the ring buffer has a length of 0","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":116795,"byte_end":116850,"line_start":247,"line_end":247,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":842},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":116993,"byte_end":116997,"line_start":253,"line_end":253,"column_start":12,"column_end":16},"name":"iter","qualname":"<RingBuffer<T, N, U>>::iter","value":"fn (&self) -> Iter<T, N, U>","parent":null,"children":[],"decl_id":null,"docs":" Iterates from the front of the queue to the back\n","sig":null,"attributes":[{"value":"/ Iterates from the front of the queue to the back","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":116929,"byte_end":116981,"line_start":252,"line_end":252,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":843},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":117208,"byte_end":117216,"line_start":262,"line_end":262,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<RingBuffer<T, N, U>>::iter_mut","value":"fn (&mut self) -> IterMut<T, N, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that allows modifying each value.\n","sig":null,"attributes":[{"value":"/ Returns an iterator that allows modifying each value.","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":117139,"byte_end":117196,"line_start":261,"line_end":261,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1586},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":121892,"byte_end":121895,"line_start":422,"line_end":422,"column_start":22,"column_end":25},"name":"new","qualname":"<RingBuffer<T, N, usize>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Alias for [`RingBuffer::usize`](struct.RingBuffer.html#method.usize)\n","sig":null,"attributes":[{"value":"cfg(not(feature = \"const-fn\"))","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/const_fn.rs","byte_start":4992,"byte_end":5025,"line_start":23,"line_end":23,"column_start":9,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1594},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":122064,"byte_end":122069,"line_start":432,"line_end":432,"column_start":8,"column_end":13},"name":"usize","qualname":"<RingBuffer<T, N, usize>>::usize","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty ring buffer with a fixed capacity of `N`\n","sig":null,"attributes":[{"value":"cfg(not(feature = \"const-fn\"))","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/const_fn.rs","byte_start":4992,"byte_end":5025,"line_start":23,"line_end":23,"column_start":9,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":870},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":122125,"byte_end":122129,"line_start":435,"line_end":435,"column_start":12,"column_end":16},"name":"Iter","qualname":"::ring_buffer::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":875},{"krate":0,"index":876},{"krate":0,"index":877}],"decl_id":null,"docs":" An iterator over a ring buffer items\n","sig":null,"attributes":[{"value":"/ An iterator over a ring buffer items","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":122073,"byte_end":122113,"line_start":434,"line_end":434,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":878},"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":122372,"byte_end":122379,"line_start":448,"line_end":448,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::ring_buffer::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":883},{"krate":0,"index":884},{"krate":0,"index":885}],"decl_id":null,"docs":" A mutable iterator over a ring buffer items\n","sig":null,"attributes":[{"value":"/ A mutable iterator over a ring buffer items","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":122313,"byte_end":122360,"line_start":447,"line_end":447,"column_start":1,"column_end":48}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":7624,"byte_end":7633,"line_start":20,"line_end":20,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":47},{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":8386,"byte_end":8389,"line_start":47,"line_end":47,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":9450,"byte_end":9457,"line_start":95,"line_end":95,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":17431,"byte_end":17439,"line_start":322,"line_end":322,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":17963,"byte_end":17971,"line_start":340,"line_end":340,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":110},{"krate":0,"index":113},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":124},{"krate":0,"index":126},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":135},{"krate":0,"index":137}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":28560,"byte_end":28568,"line_start":702,"line_end":702,"column_start":47,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":145},{"krate":0,"index":146}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":28890,"byte_end":28898,"line_start":716,"line_end":716,"column_start":50,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":29197,"byte_end":29205,"line_start":728,"line_end":728,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":29506,"byte_end":29514,"line_start":740,"line_end":740,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":29821,"byte_end":29829,"line_start":754,"line_end":754,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":30191,"byte_end":30199,"line_start":770,"line_end":770,"column_start":49,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":30572,"byte_end":30580,"line_start":785,"line_end":785,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":31666,"byte_end":31670,"line_start":837,"line_end":837,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":217},{"krate":0,"index":218}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":32002,"byte_end":32009,"line_start":857,"line_end":857,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":229},{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":34580,"byte_end":34588,"line_start":55,"line_end":55,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":264}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":34893,"byte_end":34901,"line_start":69,"line_end":69,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":275},{"krate":0,"index":280},{"krate":0,"index":284},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":294},{"krate":0,"index":298},{"krate":0,"index":302},{"krate":0,"index":305},{"krate":0,"index":308}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":46261,"byte_end":46269,"line_start":457,"line_end":457,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":46546,"byte_end":46554,"line_start":468,"line_end":468,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":319}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":46839,"byte_end":46847,"line_start":481,"line_end":481,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":326}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":47205,"byte_end":47213,"line_start":494,"line_end":494,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":331}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":47531,"byte_end":47539,"line_start":508,"line_end":508,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":339}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":47859,"byte_end":47867,"line_start":522,"line_end":522,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":345}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":48574,"byte_end":48578,"line_start":559,"line_end":559,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":362},{"krate":0,"index":363}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":48975,"byte_end":48985,"line_start":580,"line_end":580,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":377},{"krate":0,"index":378}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":49610,"byte_end":49622,"line_start":608,"line_end":608,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":391},{"krate":0,"index":392}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":50392,"byte_end":50401,"line_start":19,"line_end":19,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":926},{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":417},{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":430},{"krate":0,"index":435},{"krate":0,"index":438}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":59412,"byte_end":59421,"line_start":367,"line_end":367,"column_start":44,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":447},{"krate":0,"index":448}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":59690,"byte_end":59699,"line_start":381,"line_end":381,"column_start":47,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":455}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":60284,"byte_end":60288,"line_start":414,"line_end":414,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":473},{"krate":0,"index":474}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":60601,"byte_end":60608,"line_start":434,"line_end":434,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":485},{"krate":0,"index":486}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":61351,"byte_end":61357,"line_start":16,"line_end":16,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":927},{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":511},{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":514},{"krate":0,"index":515},{"krate":0,"index":516}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":70644,"byte_end":70650,"line_start":393,"line_end":393,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":520}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":70835,"byte_end":70841,"line_start":404,"line_end":404,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":523}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":71024,"byte_end":71030,"line_start":414,"line_end":414,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":526},{"krate":0,"index":528}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":71330,"byte_end":71336,"line_start":427,"line_end":427,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":532},{"krate":0,"index":533}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":71483,"byte_end":71489,"line_start":438,"line_end":438,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":536}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":71625,"byte_end":71631,"line_start":447,"line_end":447,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":539}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":71758,"byte_end":71764,"line_start":457,"line_end":457,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":542}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":71918,"byte_end":71924,"line_start":467,"line_end":467,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":546},{"krate":0,"index":547}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":73091,"byte_end":73097,"line_start":516,"line_end":516,"column_start":16,"column_end":22},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":78679,"byte_end":78682,"line_start":46,"line_end":46,"column_start":12,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":952},{"krate":0,"index":570},{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":574},{"krate":0,"index":575},{"krate":0,"index":576},{"krate":0,"index":577},{"krate":0,"index":578},{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":582}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":84609,"byte_end":84612,"line_start":246,"line_end":246,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":586}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":84813,"byte_end":84816,"line_start":257,"line_end":257,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":590}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":84966,"byte_end":84969,"line_start":266,"line_end":266,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":594}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":85216,"byte_end":85219,"line_start":280,"line_end":280,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":85895,"byte_end":85898,"line_start":317,"line_end":317,"column_start":32,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":619}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":86508,"byte_end":86516,"line_start":347,"line_end":347,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":629},{"krate":0,"index":630}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":86925,"byte_end":86933,"line_start":364,"line_end":364,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":634}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":87273,"byte_end":87276,"line_start":378,"line_end":378,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":638},{"krate":0,"index":639},{"krate":0,"index":640}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":87507,"byte_end":87510,"line_start":390,"line_end":390,"column_start":46,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":646}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":88376,"byte_end":88379,"line_start":433,"line_end":433,"column_start":19,"column_end":22},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":88457,"byte_end":88460,"line_start":440,"line_end":440,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":655},{"krate":0,"index":656}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":88812,"byte_end":88815,"line_start":454,"line_end":454,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":660}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":89191,"byte_end":89194,"line_start":468,"line_end":468,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":664}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":89332,"byte_end":89335,"line_start":478,"line_end":478,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":668}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":89475,"byte_end":89478,"line_start":488,"line_end":488,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":672}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":89609,"byte_end":89612,"line_start":498,"line_end":498,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":676}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":97157,"byte_end":97160,"line_start":34,"line_end":34,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":692}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":97248,"byte_end":97251,"line_start":40,"line_end":40,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":694}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":99032,"byte_end":99042,"line_start":103,"line_end":103,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1568},{"krate":0,"index":705},{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":711},{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":716},{"krate":0,"index":717}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":106239,"byte_end":106243,"line_start":354,"line_end":354,"column_start":13,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":727},{"krate":0,"index":728},{"krate":0,"index":729},{"krate":0,"index":730},{"krate":0,"index":731}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":107684,"byte_end":107688,"line_start":404,"line_end":404,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":735}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/spsc.rs","byte_start":127823,"byte_end":127833,"line_start":10,"line_end":10,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":780}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/spsc.rs","byte_start":128843,"byte_end":128851,"line_start":44,"line_end":44,"column_start":35,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/spsc.rs","byte_start":129398,"byte_end":129406,"line_start":65,"line_end":65,"column_start":35,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":113559,"byte_end":113565,"line_start":123,"line_end":123,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1585},{"krate":0,"index":825},{"krate":0,"index":826},{"krate":0,"index":827},{"krate":0,"index":828}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":116544,"byte_end":116554,"line_start":236,"line_end":236,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":840},{"krate":0,"index":841},{"krate":0,"index":842},{"krate":0,"index":843},{"krate":0,"index":844}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":117683,"byte_end":117693,"line_start":283,"line_end":283,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":849}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":121684,"byte_end":121694,"line_start":415,"line_end":415,"column_start":12,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1586}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/__core.rs","byte_start":136061,"byte_end":136072,"line_start":21,"line_end":21,"column_start":13,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":901},{"krate":0,"index":902},{"krate":0,"index":903}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":4251,"byte_end":4262,"line_start":116,"line_end":116,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":677}},{"kind":"Mod","span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/lib.rs","byte_start":4272,"byte_end":4283,"line_start":117,"line_end":117,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":744}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":7624,"byte_end":7633,"line_start":20,"line_end":20,"column_start":6,"column_end":15},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":904},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":8386,"byte_end":8389,"line_start":47,"line_end":47,"column_start":6,"column_end":9},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":917},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":9450,"byte_end":9457,"line_start":95,"line_end":95,"column_start":15,"column_end":22},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":69},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":17431,"byte_end":17439,"line_start":322,"line_end":322,"column_start":18,"column_end":26},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":88},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":17963,"byte_end":17971,"line_start":340,"line_end":340,"column_start":18,"column_end":26},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":88},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":28560,"byte_end":28568,"line_start":702,"line_end":702,"column_start":47,"column_end":55},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":2155}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":28890,"byte_end":28898,"line_start":716,"line_end":716,"column_start":50,"column_end":58},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":2159}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":29197,"byte_end":29205,"line_start":728,"line_end":728,"column_start":33,"column_end":41},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":6183}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":29506,"byte_end":29514,"line_start":740,"line_end":740,"column_start":30,"column_end":38},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":1893}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":29821,"byte_end":29829,"line_start":754,"line_end":754,"column_start":37,"column_end":45},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":4891}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":30191,"byte_end":30199,"line_start":770,"line_end":770,"column_start":49,"column_end":57},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":4891}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":30572,"byte_end":30580,"line_start":785,"line_end":785,"column_start":43,"column_end":51},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":4878}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":31666,"byte_end":31670,"line_start":837,"line_end":837,"column_start":29,"column_end":33},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":208},"to":{"krate":1,"index":4972}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexmap.rs","byte_start":32002,"byte_end":32009,"line_start":857,"line_end":857,"column_start":29,"column_end":36},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":220},"to":{"krate":1,"index":4972}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":34580,"byte_end":34588,"line_start":55,"line_end":55,"column_start":15,"column_end":23},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":255},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":34893,"byte_end":34901,"line_start":69,"line_end":69,"column_start":15,"column_end":23},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":255},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":46261,"byte_end":46269,"line_start":457,"line_end":457,"column_start":30,"column_end":38},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":255},"to":{"krate":1,"index":6183}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":46546,"byte_end":46554,"line_start":468,"line_end":468,"column_start":27,"column_end":35},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":255},"to":{"krate":1,"index":1893}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":46839,"byte_end":46847,"line_start":481,"line_end":481,"column_start":60,"column_end":68},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":255},"to":{"krate":1,"index":1632}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":47205,"byte_end":47213,"line_start":494,"line_end":494,"column_start":29,"column_end":37},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":255},"to":{"krate":1,"index":4891}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":47531,"byte_end":47539,"line_start":508,"line_end":508,"column_start":37,"column_end":45},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":255},"to":{"krate":1,"index":4891}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":47859,"byte_end":47867,"line_start":522,"line_end":522,"column_start":35,"column_end":43},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":255},"to":{"krate":1,"index":4878}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":48574,"byte_end":48578,"line_start":559,"line_end":559,"column_start":26,"column_end":30},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":355},"to":{"krate":1,"index":4972}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":48975,"byte_end":48985,"line_start":580,"line_end":580,"column_start":32,"column_end":42},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":365},"to":{"krate":1,"index":4972}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/indexset.rs","byte_start":49610,"byte_end":49622,"line_start":608,"line_end":608,"column_start":32,"column_end":44},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":379},"to":{"krate":1,"index":4972}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":50392,"byte_end":50401,"line_start":19,"line_end":19,"column_start":15,"column_end":24},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":401},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":59412,"byte_end":59421,"line_start":367,"line_end":367,"column_start":44,"column_end":53},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":401},"to":{"krate":1,"index":2155}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":59690,"byte_end":59699,"line_start":381,"line_end":381,"column_start":47,"column_end":56},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":401},"to":{"krate":1,"index":2159}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":60284,"byte_end":60288,"line_start":414,"line_end":414,"column_start":29,"column_end":33},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":464},"to":{"krate":1,"index":4972}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/linear_map.rs","byte_start":60601,"byte_end":60608,"line_start":434,"line_end":434,"column_start":29,"column_end":36},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":476},"to":{"krate":1,"index":4972}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":61351,"byte_end":61357,"line_start":16,"line_end":16,"column_start":9,"column_end":15},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":496},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":70644,"byte_end":70650,"line_start":393,"line_end":393,"column_start":31,"column_end":37},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":496},"to":{"krate":1,"index":1823}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":70835,"byte_end":70841,"line_start":404,"line_end":404,"column_start":24,"column_end":30},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":496},"to":{"krate":1,"index":6183}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":71024,"byte_end":71030,"line_start":414,"line_end":414,"column_start":24,"column_end":30},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":496},"to":{"krate":1,"index":6144}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":71330,"byte_end":71336,"line_start":427,"line_end":427,"column_start":24,"column_end":30},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":496},"to":{"krate":1,"index":2074}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":71483,"byte_end":71489,"line_start":438,"line_end":438,"column_start":27,"column_end":33},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":496},"to":{"krate":1,"index":2087}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":71625,"byte_end":71631,"line_start":447,"line_end":447,"column_start":24,"column_end":30},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":496},"to":{"krate":1,"index":1814}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":71758,"byte_end":71764,"line_start":457,"line_end":457,"column_start":25,"column_end":31},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":496},"to":{"krate":1,"index":1814}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":71918,"byte_end":71924,"line_start":467,"line_end":467,"column_start":40,"column_end":46},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":496},"to":{"krate":1,"index":1632}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/string.rs","byte_start":73091,"byte_end":73097,"line_start":516,"line_end":516,"column_start":16,"column_end":22},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":496},"to":{"krate":1,"index":1637}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":78679,"byte_end":78682,"line_start":46,"line_end":46,"column_start":12,"column_end":15},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":562},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":84609,"byte_end":84612,"line_start":246,"line_end":246,"column_start":27,"column_end":30},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":562},"to":{"krate":1,"index":6183}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":84813,"byte_end":84816,"line_start":257,"line_end":257,"column_start":21,"column_end":24},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":562},"to":{"krate":1,"index":2098}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":84966,"byte_end":84969,"line_start":266,"line_end":266,"column_start":26,"column_end":29},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":562},"to":{"krate":1,"index":4891}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":85216,"byte_end":85219,"line_start":280,"line_end":280,"column_start":34,"column_end":37},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":562},"to":{"krate":1,"index":4891}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":85895,"byte_end":85898,"line_start":317,"line_end":317,"column_start":32,"column_end":35},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":562},"to":{"krate":1,"index":4878}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":86508,"byte_end":86516,"line_start":347,"line_end":347,"column_start":25,"column_end":33},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":621},"to":{"krate":1,"index":4972}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":86925,"byte_end":86933,"line_start":364,"line_end":364,"column_start":21,"column_end":29},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":621},"to":{"krate":1,"index":2098}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":87273,"byte_end":87276,"line_start":378,"line_end":378,"column_start":29,"column_end":32},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":562},"to":{"krate":1,"index":4882}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":87507,"byte_end":87510,"line_start":390,"line_end":390,"column_start":46,"column_end":49},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":562},"to":{"krate":1,"index":1632}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":88376,"byte_end":88379,"line_start":433,"line_end":433,"column_start":19,"column_end":22},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":562},"to":{"krate":1,"index":1637}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":88457,"byte_end":88460,"line_start":440,"line_end":440,"column_start":27,"column_end":30},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":562},"to":{"krate":1,"index":2074}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":88812,"byte_end":88815,"line_start":454,"line_end":454,"column_start":30,"column_end":33},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":562},"to":{"krate":1,"index":2087}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":89191,"byte_end":89194,"line_start":468,"line_end":468,"column_start":33,"column_end":36},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":562},"to":{"krate":1,"index":1814}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":89332,"byte_end":89335,"line_start":478,"line_end":478,"column_start":33,"column_end":36},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":562},"to":{"krate":1,"index":1817}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":89475,"byte_end":89478,"line_start":488,"line_end":488,"column_start":27,"column_end":30},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":562},"to":{"krate":1,"index":1814}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/vec.rs","byte_start":89609,"byte_end":89612,"line_start":498,"line_end":498,"column_start":27,"column_end":30},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":562},"to":{"krate":1,"index":1817}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":97157,"byte_end":97160,"line_start":34,"line_end":34,"column_start":22,"column_end":25},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":687},"to":{"krate":0,"index":689}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":97248,"byte_end":97251,"line_start":40,"line_end":40,"column_start":22,"column_end":25},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":688},"to":{"krate":0,"index":689}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":99032,"byte_end":99042,"line_start":103,"line_end":103,"column_start":15,"column_end":25},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":695},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":106239,"byte_end":106243,"line_start":354,"line_end":354,"column_start":13,"column_end":17},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":718},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/binary_heap.rs","byte_start":107684,"byte_end":107688,"line_start":404,"line_end":404,"column_start":22,"column_end":26},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":718},"to":{"krate":1,"index":2098}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/spsc.rs","byte_start":127823,"byte_end":127833,"line_start":10,"line_end":10,"column_start":15,"column_end":25},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":829},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/spsc.rs","byte_start":128843,"byte_end":128851,"line_start":44,"line_end":44,"column_start":35,"column_end":43},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":782},"to":{"krate":1,"index":1903}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/spsc.rs","byte_start":129398,"byte_end":129406,"line_start":65,"line_end":65,"column_start":35,"column_end":43},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":794},"to":{"krate":1,"index":1903}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":111130,"byte_end":111134,"line_start":22,"line_end":22,"column_start":23,"column_end":27},"kind":"SuperTrait","from":{"krate":1,"index":1820},"to":{"krate":0,"index":807}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":111144,"byte_end":111148,"line_start":22,"line_end":22,"column_start":37,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":1903},"to":{"krate":0,"index":807}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":111160,"byte_end":111166,"line_start":22,"line_end":22,"column_start":53,"column_end":59},"kind":"SuperTrait","from":{"krate":0,"index":813},"to":{"krate":0,"index":807}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":113559,"byte_end":113565,"line_start":123,"line_end":123,"column_start":9,"column_end":15},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":820},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":116544,"byte_end":116554,"line_start":236,"line_end":236,"column_start":15,"column_end":25},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":829},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":117683,"byte_end":117693,"line_start":283,"line_end":283,"column_start":24,"column_end":34},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":829},"to":{"krate":1,"index":2098}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/ring_buffer/mod.rs","byte_start":121684,"byte_end":121694,"line_start":415,"line_end":415,"column_start":12,"column_end":22},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":829},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/ahmed/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.3.7/src/__core.rs","byte_start":136061,"byte_end":136072,"line_start":21,"line_end":21,"column_start":13,"column_end":24},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":896},"to":{"krate":4294967295,"index":4294967295}}]}